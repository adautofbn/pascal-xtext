/*
 * generated by Xtext 2.9.0
 */
grammar InternalPascal;

options {
	superClass=AbstractInternalAntlrParser;
	backtrack=true;
}

@lexer::header {
package edu.ufcg.compiladores.pascal.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package edu.ufcg.compiladores.pascal.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.common.util.Enumerator;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import edu.ufcg.compiladores.pascal.services.PascalGrammarAccess;

}

@parser::members {

/*
  This grammar contains a lot of empty actions to work around a bug in ANTLR.
  Otherwise the ANTLR tool will create synpreds that cannot be compiled in some rare cases.
*/

 	private PascalGrammarAccess grammarAccess;

    public InternalPascalParser(TokenStream input, PascalGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "Pascal";
   	}

   	@Override
   	protected PascalGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRulePascal
entryRulePascal returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPascalRule()); }
	iv_rulePascal=rulePascal
	{ $current=$iv_rulePascal.current; }
	EOF;

// Rule Pascal
rulePascal returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getPascalAccess().getHeadProgramParserRuleCall_0_0());
				}
				lv_head_0_0=ruleprogram
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getPascalRule());
					}
					set(
						$current,
						"head",
						lv_head_0_0,
						"edu.ufcg.compiladores.pascal.Pascal.program");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getPascalAccess().getDeclarationsVar_blockParserRuleCall_1_0());
				}
				lv_declarations_1_0=rulevar_block
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getPascalRule());
					}
					add(
						$current,
						"declarations",
						lv_declarations_1_0,
						"edu.ufcg.compiladores.pascal.Pascal.var_block");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		(
			(
				{
					newCompositeNode(grammarAccess.getPascalAccess().getScopeBlockParserRuleCall_2_0());
				}
				lv_scope_2_0=ruleblock
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getPascalRule());
					}
					add(
						$current,
						"scope",
						lv_scope_2_0,
						"edu.ufcg.compiladores.pascal.Pascal.block");
					afterParserOrEnumRuleCall();
				}
			)
		)*
	)?
;

// Entry rule entryRuleprogram
entryRuleprogram returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getProgramRule()); }
	iv_ruleprogram=ruleprogram
	{ $current=$iv_ruleprogram.current; }
	EOF;

// Rule program
ruleprogram returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='program'
		{
			newLeafNode(otherlv_0, grammarAccess.getProgramAccess().getProgramKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getProgramAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getProgramRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_2=';'
		{
			newLeafNode(otherlv_2, grammarAccess.getProgramAccess().getSemicolonKeyword_2());
		}
	)
;

// Entry rule entryRulevar_block
entryRulevar_block returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getVar_blockRule()); }
	iv_rulevar_block=rulevar_block
	{ $current=$iv_rulevar_block.current; }
	EOF;

// Rule var_block
rulevar_block returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='var'
		{
			newLeafNode(otherlv_0, grammarAccess.getVar_blockAccess().getVarKeyword_0());
		}
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getVar_blockAccess().getVar_statementsVar_declParserRuleCall_1_0_0());
					}
					lv_var_statements_1_0=rulevar_decl
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getVar_blockRule());
						}
						add(
							$current,
							"var_statements",
							lv_var_statements_1_0,
							"edu.ufcg.compiladores.pascal.Pascal.var_decl");
						afterParserOrEnumRuleCall();
					}
				)
			)
			    |
			(
				(
					{
						newCompositeNode(grammarAccess.getVar_blockAccess().getVar_statementsVar_listParserRuleCall_1_1_0());
					}
					lv_var_statements_2_0=rulevar_list
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getVar_blockRule());
						}
						add(
							$current,
							"var_statements",
							lv_var_statements_2_0,
							"edu.ufcg.compiladores.pascal.Pascal.var_list");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)+
	)
;

// Entry rule entryRulevar_decl
entryRulevar_decl returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getVar_declRule()); }
	iv_rulevar_decl=rulevar_decl
	{ $current=$iv_rulevar_decl.current; }
	EOF;

// Rule var_decl
rulevar_decl returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_var_id_0_0=RULE_ID
				{
					newLeafNode(lv_var_id_0_0, grammarAccess.getVar_declAccess().getVar_idIDTerminalRuleCall_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getVar_declRule());
					}
					setWithLastConsumed(
						$current,
						"var_id",
						lv_var_id_0_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_1=':'
		{
			newLeafNode(otherlv_1, grammarAccess.getVar_declAccess().getColonKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getVar_declAccess().getVar_typeTypeEnumRuleCall_2_0());
				}
				lv_var_type_2_0=ruletype
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getVar_declRule());
					}
					set(
						$current,
						"var_type",
						lv_var_type_2_0,
						"edu.ufcg.compiladores.pascal.Pascal.type");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_3='='
			{
				newLeafNode(otherlv_3, grammarAccess.getVar_declAccess().getEqualsSignKeyword_3_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getVar_declAccess().getValueSome_valueParserRuleCall_3_1_0());
					}
					lv_value_4_0=rulesome_value
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getVar_declRule());
						}
						set(
							$current,
							"value",
							lv_value_4_0,
							"edu.ufcg.compiladores.pascal.Pascal.some_value");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
		otherlv_5=';'
		{
			newLeafNode(otherlv_5, grammarAccess.getVar_declAccess().getSemicolonKeyword_4());
		}
	)
;

// Entry rule entryRulevar_list
entryRulevar_list returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getVar_listRule()); }
	iv_rulevar_list=rulevar_list
	{ $current=$iv_rulevar_list.current; }
	EOF;

// Rule var_list
rulevar_list returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_var_id_0_0=RULE_ID
				{
					newLeafNode(lv_var_id_0_0, grammarAccess.getVar_listAccess().getVar_idIDTerminalRuleCall_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getVar_listRule());
					}
					setWithLastConsumed(
						$current,
						"var_id",
						lv_var_id_0_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		(
			otherlv_1=','
			{
				newLeafNode(otherlv_1, grammarAccess.getVar_listAccess().getCommaKeyword_1_0());
			}
			(
				(
					lv_var_ids_2_0=RULE_ID
					{
						newLeafNode(lv_var_ids_2_0, grammarAccess.getVar_listAccess().getVar_idsIDTerminalRuleCall_1_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getVar_listRule());
						}
						addWithLastConsumed(
							$current,
							"var_ids",
							lv_var_ids_2_0,
							"org.eclipse.xtext.common.Terminals.ID");
					}
				)
			)
		)*
		otherlv_3=':'
		{
			newLeafNode(otherlv_3, grammarAccess.getVar_listAccess().getColonKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getVar_listAccess().getVar_typeTypeEnumRuleCall_3_0());
				}
				lv_var_type_4_0=ruletype
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getVar_listRule());
					}
					set(
						$current,
						"var_type",
						lv_var_type_4_0,
						"edu.ufcg.compiladores.pascal.Pascal.type");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_5=';'
		{
			newLeafNode(otherlv_5, grammarAccess.getVar_listAccess().getSemicolonKeyword_4());
		}
	)
;

// Entry rule entryRuleblock
entryRuleblock returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getBlockRule()); }
	iv_ruleblock=ruleblock
	{ $current=$iv_ruleblock.current; }
	EOF;

// Rule block
ruleblock returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='begin'
		{
			newLeafNode(otherlv_0, grammarAccess.getBlockAccess().getBeginKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getBlockAccess().getStatementsStatementParserRuleCall_1_0());
				}
				lv_statements_1_0=rulestatement
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getBlockRule());
					}
					add(
						$current,
						"statements",
						lv_statements_1_0,
						"edu.ufcg.compiladores.pascal.Pascal.statement");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_2='end'
		{
			newLeafNode(otherlv_2, grammarAccess.getBlockAccess().getEndKeyword_2());
		}
		otherlv_3='.'
		{
			newLeafNode(otherlv_3, grammarAccess.getBlockAccess().getFullStopKeyword_3());
		}
	)
;

// Entry rule entryRulestatement
entryRulestatement returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getStatementRule()); }
	iv_rulestatement=rulestatement
	{ $current=$iv_rulestatement.current; }
	EOF;

// Rule statement
rulestatement returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				newCompositeNode(grammarAccess.getStatementAccess().getAtrib_blockAtribParserRuleCall_0());
			}
			lv_atrib_block_0_0=ruleatrib
			{
				if ($current==null) {
					$current = createModelElementForParent(grammarAccess.getStatementRule());
				}
				add(
					$current,
					"atrib_block",
					lv_atrib_block_0_0,
					"edu.ufcg.compiladores.pascal.Pascal.atrib");
				afterParserOrEnumRuleCall();
			}
		)
	)+
;

// Entry rule entryRuleatrib
entryRuleatrib returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAtribRule()); }
	iv_ruleatrib=ruleatrib
	{ $current=$iv_ruleatrib.current; }
	EOF;

// Rule atrib
ruleatrib returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_var_id_0_0=RULE_ID
				{
					newLeafNode(lv_var_id_0_0, grammarAccess.getAtribAccess().getVar_idIDTerminalRuleCall_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getAtribRule());
					}
					setWithLastConsumed(
						$current,
						"var_id",
						lv_var_id_0_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_1=':='
		{
			newLeafNode(otherlv_1, grammarAccess.getAtribAccess().getColonEqualsSignKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getAtribAccess().getExpExpressionParserRuleCall_2_0());
				}
				lv_exp_2_0=ruleexpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getAtribRule());
					}
					set(
						$current,
						"exp",
						lv_exp_2_0,
						"edu.ufcg.compiladores.pascal.Pascal.expression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_3=';'
		{
			newLeafNode(otherlv_3, grammarAccess.getAtribAccess().getSemicolonKeyword_3());
		}
	)
;

// Entry rule entryRuleexpression
entryRuleexpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getExpressionRule()); }
	iv_ruleexpression=ruleexpression
	{ $current=$iv_ruleexpression.current; }
	EOF;

// Rule expression
ruleexpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			/* */
		}
		{
			newCompositeNode(grammarAccess.getExpressionAccess().getArit_expressionParserRuleCall_0());
		}
		this_arit_expression_0=rulearit_expression
		{
			$current = $this_arit_expression_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			/* */
		}
		{
			newCompositeNode(grammarAccess.getExpressionAccess().getRel_expressionParserRuleCall_1());
		}
		this_rel_expression_1=rulerel_expression
		{
			$current = $this_rel_expression_1.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRulearit_expression
entryRulearit_expression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getArit_expressionRule()); }
	iv_rulearit_expression=rulearit_expression
	{ $current=$iv_rulearit_expression.current; }
	EOF;

// Rule arit_expression
rulearit_expression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getArit_expressionAccess().getValueSome_valueParserRuleCall_0_0());
				}
				lv_value_0_0=rulesome_value
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getArit_expressionRule());
					}
					set(
						$current,
						"value",
						lv_value_0_0,
						"edu.ufcg.compiladores.pascal.Pascal.some_value");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getArit_expressionAccess().getExpRepetitive_arit_expressionParserRuleCall_1_0());
				}
				lv_exp_1_0=rulerepetitive_arit_expression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getArit_expressionRule());
					}
					add(
						$current,
						"exp",
						lv_exp_1_0,
						"edu.ufcg.compiladores.pascal.Pascal.repetitive_arit_expression");
					afterParserOrEnumRuleCall();
				}
			)
		)*
	)
;

// Entry rule entryRulerepetitive_arit_expression
entryRulerepetitive_arit_expression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getRepetitive_arit_expressionRule()); }
	iv_rulerepetitive_arit_expression=rulerepetitive_arit_expression
	{ $current=$iv_rulerepetitive_arit_expression.current; }
	EOF;

// Rule repetitive_arit_expression
rulerepetitive_arit_expression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getRepetitive_arit_expressionAccess().getOpArit_opParserRuleCall_0_0());
				}
				lv_op_0_0=rulearit_op
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getRepetitive_arit_expressionRule());
					}
					set(
						$current,
						"op",
						lv_op_0_0,
						"edu.ufcg.compiladores.pascal.Pascal.arit_op");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getRepetitive_arit_expressionAccess().getValueSome_valueParserRuleCall_1_0());
				}
				lv_value_1_0=rulesome_value
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getRepetitive_arit_expressionRule());
					}
					set(
						$current,
						"value",
						lv_value_1_0,
						"edu.ufcg.compiladores.pascal.Pascal.some_value");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getRepetitive_arit_expressionAccess().getExpRepetitive_arit_expressionParserRuleCall_2_0());
				}
				lv_exp_2_0=rulerepetitive_arit_expression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getRepetitive_arit_expressionRule());
					}
					add(
						$current,
						"exp",
						lv_exp_2_0,
						"edu.ufcg.compiladores.pascal.Pascal.repetitive_arit_expression");
					afterParserOrEnumRuleCall();
				}
			)
		)*
	)
;

// Entry rule entryRulerel_expression
entryRulerel_expression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getRel_expressionRule()); }
	iv_rulerel_expression=rulerel_expression
	{ $current=$iv_rulerel_expression.current; }
	EOF;

// Rule rel_expression
rulerel_expression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getRel_expressionAccess().getOpenOpen_parParserRuleCall_0_0());
				}
				lv_open_0_0=ruleopen_par
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getRel_expressionRule());
					}
					set(
						$current,
						"open",
						lv_open_0_0,
						"edu.ufcg.compiladores.pascal.Pascal.open_par");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getRel_expressionAccess().getFirstSome_valueParserRuleCall_1_0());
				}
				lv_first_1_0=rulesome_value
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getRel_expressionRule());
					}
					set(
						$current,
						"first",
						lv_first_1_0,
						"edu.ufcg.compiladores.pascal.Pascal.some_value");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getRel_expressionAccess().getOpRel_opParserRuleCall_2_0());
				}
				lv_op_2_0=rulerel_op
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getRel_expressionRule());
					}
					set(
						$current,
						"op",
						lv_op_2_0,
						"edu.ufcg.compiladores.pascal.Pascal.rel_op");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getRel_expressionAccess().getSecondSome_valueParserRuleCall_3_0());
				}
				lv_second_3_0=rulesome_value
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getRel_expressionRule());
					}
					set(
						$current,
						"second",
						lv_second_3_0,
						"edu.ufcg.compiladores.pascal.Pascal.some_value");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getRel_expressionAccess().getCloseClose_parParserRuleCall_4_0());
				}
				lv_close_4_0=ruleclose_par
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getRel_expressionRule());
					}
					set(
						$current,
						"close",
						lv_close_4_0,
						"edu.ufcg.compiladores.pascal.Pascal.close_par");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRulearit_op
entryRulearit_op returns [String current=null]:
	{ newCompositeNode(grammarAccess.getArit_opRule()); }
	iv_rulearit_op=rulearit_op
	{ $current=$iv_rulearit_op.current.getText(); }
	EOF;

// Rule arit_op
rulearit_op returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='+'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getArit_opAccess().getPlusSignKeyword_0());
		}
		    |
		kw='-'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getArit_opAccess().getHyphenMinusKeyword_1());
		}
		    |
		kw='*'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getArit_opAccess().getAsteriskKeyword_2());
		}
		    |
		kw='div'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getArit_opAccess().getDivKeyword_3());
		}
		    |
		kw='mod'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getArit_opAccess().getModKeyword_4());
		}
	)
;

// Entry rule entryRulerel_op
entryRulerel_op returns [String current=null]:
	{ newCompositeNode(grammarAccess.getRel_opRule()); }
	iv_rulerel_op=rulerel_op
	{ $current=$iv_rulerel_op.current.getText(); }
	EOF;

// Rule rel_op
rulerel_op returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='>'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getRel_opAccess().getGreaterThanSignKeyword_0());
		}
		    |
		kw='<'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getRel_opAccess().getLessThanSignKeyword_1());
		}
		    |
		kw='>='
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getRel_opAccess().getGreaterThanSignEqualsSignKeyword_2());
		}
		    |
		kw='<='
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getRel_opAccess().getLessThanSignEqualsSignKeyword_3());
		}
	)
;

// Entry rule entryRulesome_value
entryRulesome_value returns [String current=null]:
	{ newCompositeNode(grammarAccess.getSome_valueRule()); }
	iv_rulesome_value=rulesome_value
	{ $current=$iv_rulesome_value.current.getText(); }
	EOF;

// Rule some_value
rulesome_value returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		this_ID_0=RULE_ID
		{
			$current.merge(this_ID_0);
		}
		{
			newLeafNode(this_ID_0, grammarAccess.getSome_valueAccess().getIDTerminalRuleCall_0());
		}
		    |
		this_INT_1=RULE_INT
		{
			$current.merge(this_INT_1);
		}
		{
			newLeafNode(this_INT_1, grammarAccess.getSome_valueAccess().getINTTerminalRuleCall_1());
		}
		    |
		this_STRING_2=RULE_STRING
		{
			$current.merge(this_STRING_2);
		}
		{
			newLeafNode(this_STRING_2, grammarAccess.getSome_valueAccess().getSTRINGTerminalRuleCall_2());
		}
		    |
		this_BOOLEAN_3=RULE_BOOLEAN
		{
			$current.merge(this_BOOLEAN_3);
		}
		{
			newLeafNode(this_BOOLEAN_3, grammarAccess.getSome_valueAccess().getBOOLEANTerminalRuleCall_3());
		}
	)
;

// Entry rule entryRuleopen_par
entryRuleopen_par returns [String current=null]:
	{ newCompositeNode(grammarAccess.getOpen_parRule()); }
	iv_ruleopen_par=ruleopen_par
	{ $current=$iv_ruleopen_par.current.getText(); }
	EOF;

// Rule open_par
ruleopen_par returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='('
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getOpen_parAccess().getLeftParenthesisKeyword());
		}
	)?
;

// Entry rule entryRuleclose_par
entryRuleclose_par returns [String current=null]:
	{ newCompositeNode(grammarAccess.getClose_parRule()); }
	iv_ruleclose_par=ruleclose_par
	{ $current=$iv_ruleclose_par.current.getText(); }
	EOF;

// Rule close_par
ruleclose_par returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw=')'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getClose_parAccess().getRightParenthesisKeyword());
		}
	)?
;

// Rule type
ruletype returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			enumLiteral_0='boolean'
			{
				$current = grammarAccess.getTypeAccess().getBOOLEANEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_0, grammarAccess.getTypeAccess().getBOOLEANEnumLiteralDeclaration_0());
			}
		)
		    |
		(
			enumLiteral_1='integer'
			{
				$current = grammarAccess.getTypeAccess().getINTEGEREnumLiteralDeclaration_1().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_1, grammarAccess.getTypeAccess().getINTEGEREnumLiteralDeclaration_1());
			}
		)
		    |
		(
			enumLiteral_2='string'
			{
				$current = grammarAccess.getTypeAccess().getSTRINGEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_2, grammarAccess.getTypeAccess().getSTRINGEnumLiteralDeclaration_2());
			}
		)
	)
;

RULE_STRING : '\'' ('a'..'z'|'A'..'Z'|'_'|'0'..'9'|'^'|'?'|'.'|'/'|'\\'|'*'|'%'|'&'|'@'|'#'|'('|')'|'$'|'='|'{'|'}'|'['|']'|','|'!'|'|'|'+'|'-')* '\'';

RULE_BOOLEAN : ('true'|'false');

RULE_MULTI_LINE_COMMENT : ('{*' ( options {greedy=false;} : . )*'*}'|'(*' ( options {greedy=false;} : . )*'*)');

RULE_SINGLE_LINE_COMMENT : '{' ~(('\n'|'\r'))* '}' ('\r'? '\n')?;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
