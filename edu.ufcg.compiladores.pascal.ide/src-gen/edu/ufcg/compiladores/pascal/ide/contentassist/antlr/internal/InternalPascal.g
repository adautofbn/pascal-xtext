/*
 * generated by Xtext 2.9.0
 */
grammar InternalPascal;

options {
	superClass=AbstractInternalContentAssistParser;
}

@lexer::header {
package edu.ufcg.compiladores.pascal.ide.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package edu.ufcg.compiladores.pascal.ide.contentassist.antlr.internal;

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.DFA;
import edu.ufcg.compiladores.pascal.services.PascalGrammarAccess;

}
@parser::members {
	private PascalGrammarAccess grammarAccess;

	public void setGrammarAccess(PascalGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}

	@Override
	protected Grammar getGrammar() {
		return grammarAccess.getGrammar();
	}

	@Override
	protected String getValueForTokenName(String tokenName) {
		return tokenName;
	}
}

// Entry rule entryRulePascal
entryRulePascal
:
{ before(grammarAccess.getPascalRule()); }
	 rulePascal
{ after(grammarAccess.getPascalRule()); } 
	 EOF 
;

// Rule Pascal
rulePascal 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getPascalAccess().getGroup()); }
		(rule__Pascal__Group__0)
		{ after(grammarAccess.getPascalAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleprogram
entryRuleprogram
:
{ before(grammarAccess.getProgramRule()); }
	 ruleprogram
{ after(grammarAccess.getProgramRule()); } 
	 EOF 
;

// Rule program
ruleprogram 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getProgramAccess().getGroup()); }
		(rule__Program__Group__0)
		{ after(grammarAccess.getProgramAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulevar_decl
entryRulevar_decl
:
{ before(grammarAccess.getVar_declRule()); }
	 rulevar_decl
{ after(grammarAccess.getVar_declRule()); } 
	 EOF 
;

// Rule var_decl
rulevar_decl 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getVar_declAccess().getGroup()); }
		(rule__Var_decl__Group__0)
		{ after(grammarAccess.getVar_declAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulevar_list
entryRulevar_list
:
{ before(grammarAccess.getVar_listRule()); }
	 rulevar_list
{ after(grammarAccess.getVar_listRule()); } 
	 EOF 
;

// Rule var_list
rulevar_list 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getVar_listAccess().getGroup()); }
		(rule__Var_list__Group__0)
		{ after(grammarAccess.getVar_listAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleatrib
entryRuleatrib
:
{ before(grammarAccess.getAtribRule()); }
	 ruleatrib
{ after(grammarAccess.getAtribRule()); } 
	 EOF 
;

// Rule atrib
ruleatrib 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getAtribAccess().getGroup()); }
		(rule__Atrib__Group__0)
		{ after(grammarAccess.getAtribAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleSomeValue
entryRuleSomeValue
:
{ before(grammarAccess.getSomeValueRule()); }
	 ruleSomeValue
{ after(grammarAccess.getSomeValueRule()); } 
	 EOF 
;

// Rule SomeValue
ruleSomeValue 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getSomeValueAccess().getAlternatives()); }
		(rule__SomeValue__Alternatives)
		{ after(grammarAccess.getSomeValueAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Rule Type
ruleType
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTypeAccess().getAlternatives()); }
		(rule__Type__Alternatives)
		{ after(grammarAccess.getTypeAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__SomeValue__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSomeValueAccess().getIDTerminalRuleCall_0()); }
		RULE_ID
		{ after(grammarAccess.getSomeValueAccess().getIDTerminalRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getSomeValueAccess().getINTTerminalRuleCall_1()); }
		RULE_INT
		{ after(grammarAccess.getSomeValueAccess().getINTTerminalRuleCall_1()); }
	)
	|
	(
		{ before(grammarAccess.getSomeValueAccess().getSTRINGTerminalRuleCall_2()); }
		RULE_STRING
		{ after(grammarAccess.getSomeValueAccess().getSTRINGTerminalRuleCall_2()); }
	)
	|
	(
		{ before(grammarAccess.getSomeValueAccess().getANY_OTHERTerminalRuleCall_3()); }
		RULE_ANY_OTHER
		{ after(grammarAccess.getSomeValueAccess().getANY_OTHERTerminalRuleCall_3()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Type__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTypeAccess().getBOOLEANEnumLiteralDeclaration_0()); }
		('Boolean')
		{ after(grammarAccess.getTypeAccess().getBOOLEANEnumLiteralDeclaration_0()); }
	)
	|
	(
		{ before(grammarAccess.getTypeAccess().getINTEGEREnumLiteralDeclaration_1()); }
		('Integer')
		{ after(grammarAccess.getTypeAccess().getINTEGEREnumLiteralDeclaration_1()); }
	)
	|
	(
		{ before(grammarAccess.getTypeAccess().getSTRINGEnumLiteralDeclaration_2()); }
		('String')
		{ after(grammarAccess.getTypeAccess().getSTRINGEnumLiteralDeclaration_2()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Pascal__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Pascal__Group__0__Impl
	rule__Pascal__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Pascal__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPascalAccess().getElementAssignment_0()); }
	(rule__Pascal__ElementAssignment_0)
	{ after(grammarAccess.getPascalAccess().getElementAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Pascal__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Pascal__Group__1__Impl
	rule__Pascal__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Pascal__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPascalAccess().getElementAssignment_1()); }
	(rule__Pascal__ElementAssignment_1)*
	{ after(grammarAccess.getPascalAccess().getElementAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Pascal__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Pascal__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Pascal__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPascalAccess().getElementAssignment_2()); }
	(rule__Pascal__ElementAssignment_2)*
	{ after(grammarAccess.getPascalAccess().getElementAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Program__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Program__Group__0__Impl
	rule__Program__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Program__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getProgramAccess().getProgramKeyword_0()); }
	'program'
	{ after(grammarAccess.getProgramAccess().getProgramKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Program__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Program__Group__1__Impl
	rule__Program__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Program__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getProgramAccess().getNameAssignment_1()); }
	(rule__Program__NameAssignment_1)
	{ after(grammarAccess.getProgramAccess().getNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Program__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Program__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Program__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getProgramAccess().getSemicolonKeyword_2()); }
	';'
	{ after(grammarAccess.getProgramAccess().getSemicolonKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Var_decl__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Var_decl__Group__0__Impl
	rule__Var_decl__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Var_decl__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVar_declAccess().getVarKeyword_0()); }
	'var'
	{ after(grammarAccess.getVar_declAccess().getVarKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Var_decl__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Var_decl__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Var_decl__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	(
		{ before(grammarAccess.getVar_declAccess().getGroup_1()); }
		(rule__Var_decl__Group_1__0)
		{ after(grammarAccess.getVar_declAccess().getGroup_1()); }
	)
	(
		{ before(grammarAccess.getVar_declAccess().getGroup_1()); }
		(rule__Var_decl__Group_1__0)*
		{ after(grammarAccess.getVar_declAccess().getGroup_1()); }
	)
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Var_decl__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Var_decl__Group_1__0__Impl
	rule__Var_decl__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Var_decl__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVar_declAccess().getVar_listAssignment_1_0()); }
	(rule__Var_decl__Var_listAssignment_1_0)
	{ after(grammarAccess.getVar_declAccess().getVar_listAssignment_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Var_decl__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Var_decl__Group_1__1__Impl
	rule__Var_decl__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Var_decl__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVar_declAccess().getColonKeyword_1_1()); }
	':'
	{ after(grammarAccess.getVar_declAccess().getColonKeyword_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Var_decl__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Var_decl__Group_1__2__Impl
	rule__Var_decl__Group_1__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Var_decl__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVar_declAccess().getTypeAssignment_1_2()); }
	(rule__Var_decl__TypeAssignment_1_2)
	{ after(grammarAccess.getVar_declAccess().getTypeAssignment_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Var_decl__Group_1__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Var_decl__Group_1__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Var_decl__Group_1__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVar_declAccess().getSemicolonKeyword_1_3()); }
	';'
	{ after(grammarAccess.getVar_declAccess().getSemicolonKeyword_1_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Var_list__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Var_list__Group__0__Impl
	rule__Var_list__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Var_list__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVar_listAccess().getIdentifierAssignment_0()); }
	(rule__Var_list__IdentifierAssignment_0)
	{ after(grammarAccess.getVar_listAccess().getIdentifierAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Var_list__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Var_list__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Var_list__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVar_listAccess().getGroup_1()); }
	(rule__Var_list__Group_1__0)*
	{ after(grammarAccess.getVar_listAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Var_list__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Var_list__Group_1__0__Impl
	rule__Var_list__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Var_list__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVar_listAccess().getCommaKeyword_1_0()); }
	','
	{ after(grammarAccess.getVar_listAccess().getCommaKeyword_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Var_list__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Var_list__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Var_list__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	(
		{ before(grammarAccess.getVar_listAccess().getVar_listAssignment_1_1()); }
		(rule__Var_list__Var_listAssignment_1_1)
		{ after(grammarAccess.getVar_listAccess().getVar_listAssignment_1_1()); }
	)
	(
		{ before(grammarAccess.getVar_listAccess().getVar_listAssignment_1_1()); }
		(rule__Var_list__Var_listAssignment_1_1)*
		{ after(grammarAccess.getVar_listAccess().getVar_listAssignment_1_1()); }
	)
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Atrib__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Atrib__Group__0__Impl
	rule__Atrib__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Atrib__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAtribAccess().getIdentifierAssignment_0()); }
	(rule__Atrib__IdentifierAssignment_0)
	{ after(grammarAccess.getAtribAccess().getIdentifierAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Atrib__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Atrib__Group__1__Impl
	rule__Atrib__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Atrib__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAtribAccess().getColonEqualsSignKeyword_1()); }
	':='
	{ after(grammarAccess.getAtribAccess().getColonEqualsSignKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Atrib__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Atrib__Group__2__Impl
	rule__Atrib__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Atrib__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAtribAccess().getValueAssignment_2()); }
	(rule__Atrib__ValueAssignment_2)
	{ after(grammarAccess.getAtribAccess().getValueAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Atrib__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Atrib__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Atrib__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAtribAccess().getSemicolonKeyword_3()); }
	';'
	{ after(grammarAccess.getAtribAccess().getSemicolonKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Pascal__ElementAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPascalAccess().getElementProgramParserRuleCall_0_0()); }
		ruleprogram
		{ after(grammarAccess.getPascalAccess().getElementProgramParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Pascal__ElementAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPascalAccess().getElementVar_declParserRuleCall_1_0()); }
		rulevar_decl
		{ after(grammarAccess.getPascalAccess().getElementVar_declParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Pascal__ElementAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPascalAccess().getElementAtribParserRuleCall_2_0()); }
		ruleatrib
		{ after(grammarAccess.getPascalAccess().getElementAtribParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Program__NameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getProgramAccess().getNameIDTerminalRuleCall_1_0()); }
		RULE_ID
		{ after(grammarAccess.getProgramAccess().getNameIDTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Var_decl__Var_listAssignment_1_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getVar_declAccess().getVar_listVar_listParserRuleCall_1_0_0()); }
		rulevar_list
		{ after(grammarAccess.getVar_declAccess().getVar_listVar_listParserRuleCall_1_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Var_decl__TypeAssignment_1_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getVar_declAccess().getTypeTypeEnumRuleCall_1_2_0()); }
		ruleType
		{ after(grammarAccess.getVar_declAccess().getTypeTypeEnumRuleCall_1_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Var_list__IdentifierAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getVar_listAccess().getIdentifierIDTerminalRuleCall_0_0()); }
		RULE_ID
		{ after(grammarAccess.getVar_listAccess().getIdentifierIDTerminalRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Var_list__Var_listAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getVar_listAccess().getVar_listVar_listParserRuleCall_1_1_0()); }
		rulevar_list
		{ after(grammarAccess.getVar_listAccess().getVar_listVar_listParserRuleCall_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Atrib__IdentifierAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAtribAccess().getIdentifierIDTerminalRuleCall_0_0()); }
		RULE_ID
		{ after(grammarAccess.getAtribAccess().getIdentifierIDTerminalRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Atrib__ValueAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAtribAccess().getValueSomeValueParserRuleCall_2_0()); }
		ruleSomeValue
		{ after(grammarAccess.getAtribAccess().getValueSomeValueParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
