/**
 * generated by Xtext 2.9.0
 */
package edu.ufcg.compiladores.pascal.pascal;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EObject;

/**
 * <!-- begin-user-doc -->
 * A representation of the model object '<em><b>var decl</b></em>'.
 * <!-- end-user-doc -->
 *
 * <p>
 * The following features are supported:
 * <ul>
 *   <li>{@link edu.ufcg.compiladores.pascal.pascal.var_decl#getVar_list <em>Var list</em>}</li>
 *   <li>{@link edu.ufcg.compiladores.pascal.pascal.var_decl#getType <em>Type</em>}</li>
 * </ul>
 * </p>
 *
 * @see edu.ufcg.compiladores.pascal.pascal.PascalPackage#getvar_decl()
 * @model
 * @generated
 */
public interface var_decl extends EObject
{
  /**
   * Returns the value of the '<em><b>Var list</b></em>' containment reference list.
   * The list contents are of type {@link edu.ufcg.compiladores.pascal.pascal.var_list}.
   * <!-- begin-user-doc -->
   * <p>
   * If the meaning of the '<em>Var list</em>' containment reference list isn't clear,
   * there really should be more of a description here...
   * </p>
   * <!-- end-user-doc -->
   * @return the value of the '<em>Var list</em>' containment reference list.
   * @see edu.ufcg.compiladores.pascal.pascal.PascalPackage#getvar_decl_Var_list()
   * @model containment="true"
   * @generated
   */
  EList<var_list> getVar_list();

  /**
   * Returns the value of the '<em><b>Type</b></em>' attribute list.
   * The list contents are of type {@link edu.ufcg.compiladores.pascal.pascal.Type}.
   * The literals are from the enumeration {@link edu.ufcg.compiladores.pascal.pascal.Type}.
   * <!-- begin-user-doc -->
   * <p>
   * If the meaning of the '<em>Type</em>' attribute list isn't clear,
   * there really should be more of a description here...
   * </p>
   * <!-- end-user-doc -->
   * @return the value of the '<em>Type</em>' attribute list.
   * @see edu.ufcg.compiladores.pascal.pascal.Type
   * @see edu.ufcg.compiladores.pascal.pascal.PascalPackage#getvar_decl_Type()
   * @model unique="false"
   * @generated
   */
  EList<Type> getType();

} // var_decl
