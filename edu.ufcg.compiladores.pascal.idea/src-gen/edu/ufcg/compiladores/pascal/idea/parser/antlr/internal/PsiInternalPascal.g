/*
 * generated by Xtext 2.9.0
 */
grammar PsiInternalPascal;

options {
	superClass=AbstractPsiAntlrParser;
}

@lexer::header {
package edu.ufcg.compiladores.pascal.idea.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package edu.ufcg.compiladores.pascal.idea.parser.antlr.internal;

import org.eclipse.xtext.idea.parser.AbstractPsiAntlrParser;
import edu.ufcg.compiladores.pascal.idea.lang.PascalElementTypeProvider;
import org.eclipse.xtext.idea.parser.TokenTypeProvider;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import edu.ufcg.compiladores.pascal.services.PascalGrammarAccess;

import com.intellij.lang.PsiBuilder;
}

@parser::members {

	protected PascalGrammarAccess grammarAccess;

	protected PascalElementTypeProvider elementTypeProvider;

	public PsiInternalPascalParser(PsiBuilder builder, TokenStream input, PascalElementTypeProvider elementTypeProvider, PascalGrammarAccess grammarAccess) {
		this(input);
		setPsiBuilder(builder);
    	this.grammarAccess = grammarAccess;
		this.elementTypeProvider = elementTypeProvider;
	}

	@Override
	protected String getFirstRuleName() {
		return "Pascal";
	}

}

//Entry rule entryRulePascal
entryRulePascal returns [Boolean current=false]:
	{ markComposite(elementTypeProvider.getPascalElementType()); }
	iv_rulePascal=rulePascal
	{ $current=$iv_rulePascal.current; }
	EOF;

// Rule Pascal
rulePascal returns [Boolean current=false]
:
	(
		(
			(
				{
					markComposite(elementTypeProvider.getPascal_HeadProgramParserRuleCall_0_0ElementType());
				}
				lv_head_0_0=ruleprogram
				{
					doneComposite();
					if(!$current) {
						associateWithSemanticElement();
						$current = true;
					}
				}
			)
		)
		(
			(
				{
					markComposite(elementTypeProvider.getPascal_DeclarationsVar_blockParserRuleCall_1_0ElementType());
				}
				lv_declarations_1_0=rulevar_block
				{
					doneComposite();
					if(!$current) {
						associateWithSemanticElement();
						$current = true;
					}
				}
			)
		)*
		(
			(
				{
					markComposite(elementTypeProvider.getPascal_ScopeBlockParserRuleCall_2_0ElementType());
				}
				lv_scope_2_0=ruleblock
				{
					doneComposite();
					if(!$current) {
						associateWithSemanticElement();
						$current = true;
					}
				}
			)
		)*
	)?
;

//Entry rule entryRuleprogram
entryRuleprogram returns [Boolean current=false]:
	{ markComposite(elementTypeProvider.getProgramElementType()); }
	iv_ruleprogram=ruleprogram
	{ $current=$iv_ruleprogram.current; }
	EOF;

// Rule program
ruleprogram returns [Boolean current=false]
:
	(
		{
			markLeaf(elementTypeProvider.getProgram_ProgramKeyword_0ElementType());
		}
		otherlv_0='program'
		{
			doneLeaf(otherlv_0);
		}
		(
			(
				{
					markLeaf(elementTypeProvider.getProgram_NameIDTerminalRuleCall_1_0ElementType());
				}
				lv_name_1_0=RULE_ID
				{
					if(!$current) {
						associateWithSemanticElement();
						$current = true;
					}
				}
				{
					doneLeaf(lv_name_1_0);
				}
			)
		)
		{
			markLeaf(elementTypeProvider.getProgram_SemicolonKeyword_2ElementType());
		}
		otherlv_2=';'
		{
			doneLeaf(otherlv_2);
		}
	)
;

//Entry rule entryRulevar_block
entryRulevar_block returns [Boolean current=false]:
	{ markComposite(elementTypeProvider.getVar_blockElementType()); }
	iv_rulevar_block=rulevar_block
	{ $current=$iv_rulevar_block.current; }
	EOF;

// Rule var_block
rulevar_block returns [Boolean current=false]
:
	(
		{
			markLeaf(elementTypeProvider.getVar_block_VarKeyword_0ElementType());
		}
		otherlv_0='var'
		{
			doneLeaf(otherlv_0);
		}
		(
			(
				(
					{
						markComposite(elementTypeProvider.getVar_block_Var_statementsVar_declParserRuleCall_1_0_0ElementType());
					}
					lv_var_statements_1_0=rulevar_decl
					{
						doneComposite();
						if(!$current) {
							associateWithSemanticElement();
							$current = true;
						}
					}
				)
			)
			    |
			(
				(
					{
						markComposite(elementTypeProvider.getVar_block_Var_statementsVar_listParserRuleCall_1_1_0ElementType());
					}
					lv_var_statements_2_0=rulevar_list
					{
						doneComposite();
						if(!$current) {
							associateWithSemanticElement();
							$current = true;
						}
					}
				)
			)
		)+
	)
;

//Entry rule entryRulevar_decl
entryRulevar_decl returns [Boolean current=false]:
	{ markComposite(elementTypeProvider.getVar_declElementType()); }
	iv_rulevar_decl=rulevar_decl
	{ $current=$iv_rulevar_decl.current; }
	EOF;

// Rule var_decl
rulevar_decl returns [Boolean current=false]
:
	(
		(
			(
				{
					markLeaf(elementTypeProvider.getVar_decl_Var_idIDTerminalRuleCall_0_0ElementType());
				}
				lv_var_id_0_0=RULE_ID
				{
					if(!$current) {
						associateWithSemanticElement();
						$current = true;
					}
				}
				{
					doneLeaf(lv_var_id_0_0);
				}
			)
		)
		{
			markLeaf(elementTypeProvider.getVar_decl_ColonKeyword_1ElementType());
		}
		otherlv_1=':'
		{
			doneLeaf(otherlv_1);
		}
		(
			(
				{
					markComposite(elementTypeProvider.getVar_decl_Var_typeTypeEnumRuleCall_2_0ElementType());
				}
				lv_var_type_2_0=ruletype
				{
					doneComposite();
					if(!$current) {
						associateWithSemanticElement();
						$current = true;
					}
				}
			)
		)
		(
			{
				markLeaf(elementTypeProvider.getVar_decl_EqualsSignKeyword_3_0ElementType());
			}
			otherlv_3='='
			{
				doneLeaf(otherlv_3);
			}
			(
				(
					{
						markComposite(elementTypeProvider.getVar_decl_ValueSome_valueParserRuleCall_3_1_0ElementType());
					}
					lv_value_4_0=rulesome_value
					{
						doneComposite();
						if(!$current) {
							associateWithSemanticElement();
							$current = true;
						}
					}
				)
			)
		)?
		{
			markLeaf(elementTypeProvider.getVar_decl_SemicolonKeyword_4ElementType());
		}
		otherlv_5=';'
		{
			doneLeaf(otherlv_5);
		}
	)
;

//Entry rule entryRulevar_list
entryRulevar_list returns [Boolean current=false]:
	{ markComposite(elementTypeProvider.getVar_listElementType()); }
	iv_rulevar_list=rulevar_list
	{ $current=$iv_rulevar_list.current; }
	EOF;

// Rule var_list
rulevar_list returns [Boolean current=false]
:
	(
		(
			(
				{
					markLeaf(elementTypeProvider.getVar_list_Var_idIDTerminalRuleCall_0_0ElementType());
				}
				lv_var_id_0_0=RULE_ID
				{
					if(!$current) {
						associateWithSemanticElement();
						$current = true;
					}
				}
				{
					doneLeaf(lv_var_id_0_0);
				}
			)
		)
		(
			{
				markLeaf(elementTypeProvider.getVar_list_CommaKeyword_1_0ElementType());
			}
			otherlv_1=','
			{
				doneLeaf(otherlv_1);
			}
			(
				(
					{
						markLeaf(elementTypeProvider.getVar_list_Var_idsIDTerminalRuleCall_1_1_0ElementType());
					}
					lv_var_ids_2_0=RULE_ID
					{
						if(!$current) {
							associateWithSemanticElement();
							$current = true;
						}
					}
					{
						doneLeaf(lv_var_ids_2_0);
					}
				)
			)
		)*
		{
			markLeaf(elementTypeProvider.getVar_list_ColonKeyword_2ElementType());
		}
		otherlv_3=':'
		{
			doneLeaf(otherlv_3);
		}
		(
			(
				{
					markComposite(elementTypeProvider.getVar_list_Var_typeTypeEnumRuleCall_3_0ElementType());
				}
				lv_var_type_4_0=ruletype
				{
					doneComposite();
					if(!$current) {
						associateWithSemanticElement();
						$current = true;
					}
				}
			)
		)
		{
			markLeaf(elementTypeProvider.getVar_list_SemicolonKeyword_4ElementType());
		}
		otherlv_5=';'
		{
			doneLeaf(otherlv_5);
		}
	)
;

//Entry rule entryRuleblock
entryRuleblock returns [Boolean current=false]:
	{ markComposite(elementTypeProvider.getBlockElementType()); }
	iv_ruleblock=ruleblock
	{ $current=$iv_ruleblock.current; }
	EOF;

// Rule block
ruleblock returns [Boolean current=false]
:
	(
		{
			markLeaf(elementTypeProvider.getBlock_BeginKeyword_0ElementType());
		}
		otherlv_0='begin'
		{
			doneLeaf(otherlv_0);
		}
		(
			(
				{
					markComposite(elementTypeProvider.getBlock_StatementsStatementParserRuleCall_1_0ElementType());
				}
				lv_statements_1_0=rulestatement
				{
					doneComposite();
					if(!$current) {
						associateWithSemanticElement();
						$current = true;
					}
				}
			)
		)
		{
			markLeaf(elementTypeProvider.getBlock_EndKeyword_2ElementType());
		}
		otherlv_2='end'
		{
			doneLeaf(otherlv_2);
		}
		{
			markLeaf(elementTypeProvider.getBlock_FullStopKeyword_3ElementType());
		}
		otherlv_3='.'
		{
			doneLeaf(otherlv_3);
		}
	)
;

//Entry rule entryRulestatement
entryRulestatement returns [Boolean current=false]:
	{ markComposite(elementTypeProvider.getStatementElementType()); }
	iv_rulestatement=rulestatement
	{ $current=$iv_rulestatement.current; }
	EOF;

// Rule statement
rulestatement returns [Boolean current=false]
:
	(
		(
			{
				markComposite(elementTypeProvider.getStatement_Atrib_blockAtribParserRuleCall_0ElementType());
			}
			lv_atrib_block_0_0=ruleatrib
			{
				doneComposite();
				if(!$current) {
					associateWithSemanticElement();
					$current = true;
				}
			}
		)
	)+
;

//Entry rule entryRuleatrib
entryRuleatrib returns [Boolean current=false]:
	{ markComposite(elementTypeProvider.getAtribElementType()); }
	iv_ruleatrib=ruleatrib
	{ $current=$iv_ruleatrib.current; }
	EOF;

// Rule atrib
ruleatrib returns [Boolean current=false]
:
	(
		(
			(
				{
					markLeaf(elementTypeProvider.getAtrib_Var_idIDTerminalRuleCall_0_0ElementType());
				}
				lv_var_id_0_0=RULE_ID
				{
					if(!$current) {
						associateWithSemanticElement();
						$current = true;
					}
				}
				{
					doneLeaf(lv_var_id_0_0);
				}
			)
		)
		{
			markLeaf(elementTypeProvider.getAtrib_ColonEqualsSignKeyword_1ElementType());
		}
		otherlv_1=':='
		{
			doneLeaf(otherlv_1);
		}
		(
			(
				{
					markComposite(elementTypeProvider.getAtrib_ExpExpressionParserRuleCall_2_0ElementType());
				}
				lv_exp_2_0=ruleexpression
				{
					doneComposite();
					if(!$current) {
						associateWithSemanticElement();
						$current = true;
					}
				}
			)
		)
		{
			markLeaf(elementTypeProvider.getAtrib_SemicolonKeyword_3ElementType());
		}
		otherlv_3=';'
		{
			doneLeaf(otherlv_3);
		}
	)
;

//Entry rule entryRuleexpression
entryRuleexpression returns [Boolean current=false]:
	{ markComposite(elementTypeProvider.getExpressionElementType()); }
	iv_ruleexpression=ruleexpression
	{ $current=$iv_ruleexpression.current; }
	EOF;

// Rule expression
ruleexpression returns [Boolean current=false]
:
	(
		{
			markComposite(elementTypeProvider.getExpression_Arit_expressionParserRuleCall_0ElementType());
		}
		this_arit_expression_0=rulearit_expression
		{
			$current = $this_arit_expression_0.current;
			doneComposite();
		}
		    |
		{
			markComposite(elementTypeProvider.getExpression_Rel_expressionParserRuleCall_1ElementType());
		}
		this_rel_expression_1=rulerel_expression
		{
			$current = $this_rel_expression_1.current;
			doneComposite();
		}
	)
;

//Entry rule entryRulearit_expression
entryRulearit_expression returns [Boolean current=false]:
	{ markComposite(elementTypeProvider.getArit_expressionElementType()); }
	iv_rulearit_expression=rulearit_expression
	{ $current=$iv_rulearit_expression.current; }
	EOF;

// Rule arit_expression
rulearit_expression returns [Boolean current=false]
:
	(
		(
			(
				{
					markComposite(elementTypeProvider.getArit_expression_ValueSome_valueParserRuleCall_0_0ElementType());
				}
				lv_value_0_0=rulesome_value
				{
					doneComposite();
					if(!$current) {
						associateWithSemanticElement();
						$current = true;
					}
				}
			)
		)
		(
			(
				{
					markComposite(elementTypeProvider.getArit_expression_ExpRepetitive_arit_expressionParserRuleCall_1_0ElementType());
				}
				lv_exp_1_0=rulerepetitive_arit_expression
				{
					doneComposite();
					if(!$current) {
						associateWithSemanticElement();
						$current = true;
					}
				}
			)
		)*
	)
;

//Entry rule entryRulerepetitive_arit_expression
entryRulerepetitive_arit_expression returns [Boolean current=false]:
	{ markComposite(elementTypeProvider.getRepetitive_arit_expressionElementType()); }
	iv_rulerepetitive_arit_expression=rulerepetitive_arit_expression
	{ $current=$iv_rulerepetitive_arit_expression.current; }
	EOF;

// Rule repetitive_arit_expression
rulerepetitive_arit_expression returns [Boolean current=false]
:
	(
		(
			(
				{
					markComposite(elementTypeProvider.getRepetitive_arit_expression_OpArit_opParserRuleCall_0_0ElementType());
				}
				lv_op_0_0=rulearit_op
				{
					doneComposite();
					if(!$current) {
						associateWithSemanticElement();
						$current = true;
					}
				}
			)
		)
		(
			(
				{
					markComposite(elementTypeProvider.getRepetitive_arit_expression_ValueSome_valueParserRuleCall_1_0ElementType());
				}
				lv_value_1_0=rulesome_value
				{
					doneComposite();
					if(!$current) {
						associateWithSemanticElement();
						$current = true;
					}
				}
			)
		)
		(
			(
				{
					markComposite(elementTypeProvider.getRepetitive_arit_expression_ExpRepetitive_arit_expressionParserRuleCall_2_0ElementType());
				}
				lv_exp_2_0=rulerepetitive_arit_expression
				{
					doneComposite();
					if(!$current) {
						associateWithSemanticElement();
						$current = true;
					}
				}
			)
		)*
	)
;

//Entry rule entryRulerel_expression
entryRulerel_expression returns [Boolean current=false]:
	{ markComposite(elementTypeProvider.getRel_expressionElementType()); }
	iv_rulerel_expression=rulerel_expression
	{ $current=$iv_rulerel_expression.current; }
	EOF;

// Rule rel_expression
rulerel_expression returns [Boolean current=false]
:
	(
		(
			(
				{
					markComposite(elementTypeProvider.getRel_expression_OpenOpen_parParserRuleCall_0_0ElementType());
				}
				lv_open_0_0=ruleopen_par
				{
					doneComposite();
					if(!$current) {
						associateWithSemanticElement();
						$current = true;
					}
				}
			)
		)
		(
			(
				{
					markComposite(elementTypeProvider.getRel_expression_FirstSome_valueParserRuleCall_1_0ElementType());
				}
				lv_first_1_0=rulesome_value
				{
					doneComposite();
					if(!$current) {
						associateWithSemanticElement();
						$current = true;
					}
				}
			)
		)
		(
			(
				{
					markComposite(elementTypeProvider.getRel_expression_OpRel_opParserRuleCall_2_0ElementType());
				}
				lv_op_2_0=rulerel_op
				{
					doneComposite();
					if(!$current) {
						associateWithSemanticElement();
						$current = true;
					}
				}
			)
		)
		(
			(
				{
					markComposite(elementTypeProvider.getRel_expression_SecondSome_valueParserRuleCall_3_0ElementType());
				}
				lv_second_3_0=rulesome_value
				{
					doneComposite();
					if(!$current) {
						associateWithSemanticElement();
						$current = true;
					}
				}
			)
		)
		(
			(
				{
					markComposite(elementTypeProvider.getRel_expression_CloseClose_parParserRuleCall_4_0ElementType());
				}
				lv_close_4_0=ruleclose_par
				{
					doneComposite();
					if(!$current) {
						associateWithSemanticElement();
						$current = true;
					}
				}
			)
		)
	)
;

//Entry rule entryRulearit_op
entryRulearit_op returns [Boolean current=false]:
	{ markComposite(elementTypeProvider.getArit_opElementType()); }
	iv_rulearit_op=rulearit_op
	{ $current=$iv_rulearit_op.current; }
	EOF;

// Rule arit_op
rulearit_op returns [Boolean current=false]
:
	(
		{
			markLeaf(elementTypeProvider.getArit_op_PlusSignKeyword_0ElementType());
		}
		kw='+'
		{
			doneLeaf(kw);
		}
		    |
		{
			markLeaf(elementTypeProvider.getArit_op_HyphenMinusKeyword_1ElementType());
		}
		kw='-'
		{
			doneLeaf(kw);
		}
		    |
		{
			markLeaf(elementTypeProvider.getArit_op_AsteriskKeyword_2ElementType());
		}
		kw='*'
		{
			doneLeaf(kw);
		}
		    |
		{
			markLeaf(elementTypeProvider.getArit_op_DivKeyword_3ElementType());
		}
		kw='div'
		{
			doneLeaf(kw);
		}
		    |
		{
			markLeaf(elementTypeProvider.getArit_op_ModKeyword_4ElementType());
		}
		kw='mod'
		{
			doneLeaf(kw);
		}
	)
;

//Entry rule entryRulerel_op
entryRulerel_op returns [Boolean current=false]:
	{ markComposite(elementTypeProvider.getRel_opElementType()); }
	iv_rulerel_op=rulerel_op
	{ $current=$iv_rulerel_op.current; }
	EOF;

// Rule rel_op
rulerel_op returns [Boolean current=false]
:
	(
		{
			markLeaf(elementTypeProvider.getRel_op_GreaterThanSignKeyword_0ElementType());
		}
		kw='>'
		{
			doneLeaf(kw);
		}
		    |
		{
			markLeaf(elementTypeProvider.getRel_op_LessThanSignKeyword_1ElementType());
		}
		kw='<'
		{
			doneLeaf(kw);
		}
		    |
		{
			markLeaf(elementTypeProvider.getRel_op_GreaterThanSignEqualsSignKeyword_2ElementType());
		}
		kw='>='
		{
			doneLeaf(kw);
		}
		    |
		{
			markLeaf(elementTypeProvider.getRel_op_LessThanSignEqualsSignKeyword_3ElementType());
		}
		kw='<='
		{
			doneLeaf(kw);
		}
	)
;

//Entry rule entryRulesome_value
entryRulesome_value returns [Boolean current=false]:
	{ markComposite(elementTypeProvider.getSome_valueElementType()); }
	iv_rulesome_value=rulesome_value
	{ $current=$iv_rulesome_value.current; }
	EOF;

// Rule some_value
rulesome_value returns [Boolean current=false]
:
	(
		{
			markLeaf(elementTypeProvider.getSome_value_IDTerminalRuleCall_0ElementType());
		}
		this_ID_0=RULE_ID
		{
			doneLeaf(this_ID_0);
		}
		    |
		{
			markLeaf(elementTypeProvider.getSome_value_INTTerminalRuleCall_1ElementType());
		}
		this_INT_1=RULE_INT
		{
			doneLeaf(this_INT_1);
		}
		    |
		{
			markLeaf(elementTypeProvider.getSome_value_STRINGTerminalRuleCall_2ElementType());
		}
		this_STRING_2=RULE_STRING
		{
			doneLeaf(this_STRING_2);
		}
		    |
		{
			markLeaf(elementTypeProvider.getSome_value_BOOLEANTerminalRuleCall_3ElementType());
		}
		this_BOOLEAN_3=RULE_BOOLEAN
		{
			doneLeaf(this_BOOLEAN_3);
		}
	)
;

//Entry rule entryRuleopen_par
entryRuleopen_par returns [Boolean current=false]:
	{ markComposite(elementTypeProvider.getOpen_parElementType()); }
	iv_ruleopen_par=ruleopen_par
	{ $current=$iv_ruleopen_par.current; }
	EOF;

// Rule open_par
ruleopen_par returns [Boolean current=false]
:
	(
		{
			markLeaf(elementTypeProvider.getOpen_par_LeftParenthesisKeywordElementType());
		}
		kw='('
		{
			doneLeaf(kw);
		}
	)?
;

//Entry rule entryRuleclose_par
entryRuleclose_par returns [Boolean current=false]:
	{ markComposite(elementTypeProvider.getClose_parElementType()); }
	iv_ruleclose_par=ruleclose_par
	{ $current=$iv_ruleclose_par.current; }
	EOF;

// Rule close_par
ruleclose_par returns [Boolean current=false]
:
	(
		{
			markLeaf(elementTypeProvider.getClose_par_RightParenthesisKeywordElementType());
		}
		kw=')'
		{
			doneLeaf(kw);
		}
	)?
;

// Rule type
ruletype returns [Boolean current=false]
:
	(
		(
			{
				markLeaf(elementTypeProvider.getType_BOOLEANEnumLiteralDeclaration_0ElementType());
			}
			enumLiteral_0='boolean'
			{
				doneLeaf(enumLiteral_0);
			}
		)
		    |
		(
			{
				markLeaf(elementTypeProvider.getType_INTEGEREnumLiteralDeclaration_1ElementType());
			}
			enumLiteral_1='integer'
			{
				doneLeaf(enumLiteral_1);
			}
		)
		    |
		(
			{
				markLeaf(elementTypeProvider.getType_STRINGEnumLiteralDeclaration_2ElementType());
			}
			enumLiteral_2='string'
			{
				doneLeaf(enumLiteral_2);
			}
		)
	)
;

RULE_STRING : '\'' ('a'..'z'|'A'..'Z'|'_'|'0'..'9'|'^'|'?'|'.'|'/'|'\\'|'*'|'%'|'&'|'@'|'#'|'('|')'|'$'|'='|'{'|'}'|'['|']'|','|'!'|'|'|'+'|'-')* '\'';

RULE_BOOLEAN : ('true'|'false');

RULE_MULTI_LINE_COMMENT : ('{*' ( options {greedy=false;} : . )*'*}'|'(*' ( options {greedy=false;} : . )*'*)');

RULE_SINGLE_LINE_COMMENT : '{' ~(('\n'|'\r'))* '}' ('\r'? '\n')?;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
