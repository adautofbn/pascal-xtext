/*
 * generated by Xtext 2.9.0
 */
grammar InternalPascal;

options {
	superClass=AbstractInternalContentAssistParser;
	backtrack=true;
}

@lexer::header {
package edu.ufcg.compiladores.pascal.ide.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package edu.ufcg.compiladores.pascal.ide.contentassist.antlr.internal;

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.DFA;
import edu.ufcg.compiladores.pascal.services.PascalGrammarAccess;

}
@parser::members {
	private PascalGrammarAccess grammarAccess;

	public void setGrammarAccess(PascalGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}

	@Override
	protected Grammar getGrammar() {
		return grammarAccess.getGrammar();
	}

	@Override
	protected String getValueForTokenName(String tokenName) {
		return tokenName;
	}
}

// Entry rule entryRulePascal
entryRulePascal
:
{ before(grammarAccess.getPascalRule()); }
	 rulePascal
{ after(grammarAccess.getPascalRule()); } 
	 EOF 
;

// Rule Pascal
rulePascal 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getPascalAccess().getGroup()); }
		(rule__Pascal__Group__0)?
		{ after(grammarAccess.getPascalAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleprogram
entryRuleprogram
:
{ before(grammarAccess.getProgramRule()); }
	 ruleprogram
{ after(grammarAccess.getProgramRule()); } 
	 EOF 
;

// Rule program
ruleprogram 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getProgramAccess().getGroup()); }
		(rule__Program__Group__0)
		{ after(grammarAccess.getProgramAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulevar_block
entryRulevar_block
:
{ before(grammarAccess.getVar_blockRule()); }
	 rulevar_block
{ after(grammarAccess.getVar_blockRule()); } 
	 EOF 
;

// Rule var_block
rulevar_block 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getVar_blockAccess().getGroup()); }
		(rule__Var_block__Group__0)
		{ after(grammarAccess.getVar_blockAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulevar_decl
entryRulevar_decl
:
{ before(grammarAccess.getVar_declRule()); }
	 rulevar_decl
{ after(grammarAccess.getVar_declRule()); } 
	 EOF 
;

// Rule var_decl
rulevar_decl 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getVar_declAccess().getGroup()); }
		(rule__Var_decl__Group__0)
		{ after(grammarAccess.getVar_declAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulevar_list
entryRulevar_list
:
{ before(grammarAccess.getVar_listRule()); }
	 rulevar_list
{ after(grammarAccess.getVar_listRule()); } 
	 EOF 
;

// Rule var_list
rulevar_list 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getVar_listAccess().getGroup()); }
		(rule__Var_list__Group__0)
		{ after(grammarAccess.getVar_listAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleblock
entryRuleblock
:
{ before(grammarAccess.getBlockRule()); }
	 ruleblock
{ after(grammarAccess.getBlockRule()); } 
	 EOF 
;

// Rule block
ruleblock 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getBlockAccess().getGroup()); }
		(rule__Block__Group__0)
		{ after(grammarAccess.getBlockAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulestatement
entryRulestatement
:
{ before(grammarAccess.getStatementRule()); }
	 rulestatement
{ after(grammarAccess.getStatementRule()); } 
	 EOF 
;

// Rule statement
rulestatement 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		(
			{ before(grammarAccess.getStatementAccess().getAtrib_blockAssignment()); }
			(rule__Statement__Atrib_blockAssignment)
			{ after(grammarAccess.getStatementAccess().getAtrib_blockAssignment()); }
		)
		(
			{ before(grammarAccess.getStatementAccess().getAtrib_blockAssignment()); }
			(rule__Statement__Atrib_blockAssignment)*
			{ after(grammarAccess.getStatementAccess().getAtrib_blockAssignment()); }
		)
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleatrib
entryRuleatrib
:
{ before(grammarAccess.getAtribRule()); }
	 ruleatrib
{ after(grammarAccess.getAtribRule()); } 
	 EOF 
;

// Rule atrib
ruleatrib 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getAtribAccess().getGroup()); }
		(rule__Atrib__Group__0)
		{ after(grammarAccess.getAtribAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleexpression
entryRuleexpression
:
{ before(grammarAccess.getExpressionRule()); }
	 ruleexpression
{ after(grammarAccess.getExpressionRule()); } 
	 EOF 
;

// Rule expression
ruleexpression 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getExpressionAccess().getAlternatives()); }
		(rule__Expression__Alternatives)
		{ after(grammarAccess.getExpressionAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulearit_expression
entryRulearit_expression
:
{ before(grammarAccess.getArit_expressionRule()); }
	 rulearit_expression
{ after(grammarAccess.getArit_expressionRule()); } 
	 EOF 
;

// Rule arit_expression
rulearit_expression 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getArit_expressionAccess().getGroup()); }
		(rule__Arit_expression__Group__0)
		{ after(grammarAccess.getArit_expressionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulerepetitive_arit_expression
entryRulerepetitive_arit_expression
:
{ before(grammarAccess.getRepetitive_arit_expressionRule()); }
	 rulerepetitive_arit_expression
{ after(grammarAccess.getRepetitive_arit_expressionRule()); } 
	 EOF 
;

// Rule repetitive_arit_expression
rulerepetitive_arit_expression 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getRepetitive_arit_expressionAccess().getGroup()); }
		(rule__Repetitive_arit_expression__Group__0)
		{ after(grammarAccess.getRepetitive_arit_expressionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulerel_expression
entryRulerel_expression
:
{ before(grammarAccess.getRel_expressionRule()); }
	 rulerel_expression
{ after(grammarAccess.getRel_expressionRule()); } 
	 EOF 
;

// Rule rel_expression
rulerel_expression 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getRel_expressionAccess().getGroup()); }
		(rule__Rel_expression__Group__0)
		{ after(grammarAccess.getRel_expressionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulearit_op
entryRulearit_op
:
{ before(grammarAccess.getArit_opRule()); }
	 rulearit_op
{ after(grammarAccess.getArit_opRule()); } 
	 EOF 
;

// Rule arit_op
rulearit_op 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getArit_opAccess().getAlternatives()); }
		(rule__Arit_op__Alternatives)
		{ after(grammarAccess.getArit_opAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulerel_op
entryRulerel_op
:
{ before(grammarAccess.getRel_opRule()); }
	 rulerel_op
{ after(grammarAccess.getRel_opRule()); } 
	 EOF 
;

// Rule rel_op
rulerel_op 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getRel_opAccess().getAlternatives()); }
		(rule__Rel_op__Alternatives)
		{ after(grammarAccess.getRel_opAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulesome_value
entryRulesome_value
:
{ before(grammarAccess.getSome_valueRule()); }
	 rulesome_value
{ after(grammarAccess.getSome_valueRule()); } 
	 EOF 
;

// Rule some_value
rulesome_value 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getSome_valueAccess().getAlternatives()); }
		(rule__Some_value__Alternatives)
		{ after(grammarAccess.getSome_valueAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleopen_par
entryRuleopen_par
:
{ before(grammarAccess.getOpen_parRule()); }
	 ruleopen_par
{ after(grammarAccess.getOpen_parRule()); } 
	 EOF 
;

// Rule open_par
ruleopen_par 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getOpen_parAccess().getLeftParenthesisKeyword()); }
		('(')?
		{ after(grammarAccess.getOpen_parAccess().getLeftParenthesisKeyword()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleclose_par
entryRuleclose_par
:
{ before(grammarAccess.getClose_parRule()); }
	 ruleclose_par
{ after(grammarAccess.getClose_parRule()); } 
	 EOF 
;

// Rule close_par
ruleclose_par 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getClose_parAccess().getRightParenthesisKeyword()); }
		(')')?
		{ after(grammarAccess.getClose_parAccess().getRightParenthesisKeyword()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Rule type
ruletype
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTypeAccess().getAlternatives()); }
		(rule__Type__Alternatives)
		{ after(grammarAccess.getTypeAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Var_block__Alternatives_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getVar_blockAccess().getVar_statementsAssignment_1_0()); }
		(rule__Var_block__Var_statementsAssignment_1_0)
		{ after(grammarAccess.getVar_blockAccess().getVar_statementsAssignment_1_0()); }
	)
	|
	(
		{ before(grammarAccess.getVar_blockAccess().getVar_statementsAssignment_1_1()); }
		(rule__Var_block__Var_statementsAssignment_1_1)
		{ after(grammarAccess.getVar_blockAccess().getVar_statementsAssignment_1_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getExpressionAccess().getArit_expressionParserRuleCall_0()); }
		rulearit_expression
		{ after(grammarAccess.getExpressionAccess().getArit_expressionParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getExpressionAccess().getRel_expressionParserRuleCall_1()); }
		rulerel_expression
		{ after(grammarAccess.getExpressionAccess().getRel_expressionParserRuleCall_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Arit_op__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getArit_opAccess().getPlusSignKeyword_0()); }
		'+'
		{ after(grammarAccess.getArit_opAccess().getPlusSignKeyword_0()); }
	)
	|
	(
		{ before(grammarAccess.getArit_opAccess().getHyphenMinusKeyword_1()); }
		'-'
		{ after(grammarAccess.getArit_opAccess().getHyphenMinusKeyword_1()); }
	)
	|
	(
		{ before(grammarAccess.getArit_opAccess().getAsteriskKeyword_2()); }
		'*'
		{ after(grammarAccess.getArit_opAccess().getAsteriskKeyword_2()); }
	)
	|
	(
		{ before(grammarAccess.getArit_opAccess().getDivKeyword_3()); }
		'div'
		{ after(grammarAccess.getArit_opAccess().getDivKeyword_3()); }
	)
	|
	(
		{ before(grammarAccess.getArit_opAccess().getModKeyword_4()); }
		'mod'
		{ after(grammarAccess.getArit_opAccess().getModKeyword_4()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Rel_op__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRel_opAccess().getGreaterThanSignKeyword_0()); }
		'>'
		{ after(grammarAccess.getRel_opAccess().getGreaterThanSignKeyword_0()); }
	)
	|
	(
		{ before(grammarAccess.getRel_opAccess().getLessThanSignKeyword_1()); }
		'<'
		{ after(grammarAccess.getRel_opAccess().getLessThanSignKeyword_1()); }
	)
	|
	(
		{ before(grammarAccess.getRel_opAccess().getGreaterThanSignEqualsSignKeyword_2()); }
		'>='
		{ after(grammarAccess.getRel_opAccess().getGreaterThanSignEqualsSignKeyword_2()); }
	)
	|
	(
		{ before(grammarAccess.getRel_opAccess().getLessThanSignEqualsSignKeyword_3()); }
		'<='
		{ after(grammarAccess.getRel_opAccess().getLessThanSignEqualsSignKeyword_3()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Some_value__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSome_valueAccess().getIDTerminalRuleCall_0()); }
		RULE_ID
		{ after(grammarAccess.getSome_valueAccess().getIDTerminalRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getSome_valueAccess().getINTTerminalRuleCall_1()); }
		RULE_INT
		{ after(grammarAccess.getSome_valueAccess().getINTTerminalRuleCall_1()); }
	)
	|
	(
		{ before(grammarAccess.getSome_valueAccess().getSTRINGTerminalRuleCall_2()); }
		RULE_STRING
		{ after(grammarAccess.getSome_valueAccess().getSTRINGTerminalRuleCall_2()); }
	)
	|
	(
		{ before(grammarAccess.getSome_valueAccess().getBOOLEANTerminalRuleCall_3()); }
		RULE_BOOLEAN
		{ after(grammarAccess.getSome_valueAccess().getBOOLEANTerminalRuleCall_3()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Type__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTypeAccess().getBOOLEANEnumLiteralDeclaration_0()); }
		('boolean')
		{ after(grammarAccess.getTypeAccess().getBOOLEANEnumLiteralDeclaration_0()); }
	)
	|
	(
		{ before(grammarAccess.getTypeAccess().getINTEGEREnumLiteralDeclaration_1()); }
		('integer')
		{ after(grammarAccess.getTypeAccess().getINTEGEREnumLiteralDeclaration_1()); }
	)
	|
	(
		{ before(grammarAccess.getTypeAccess().getSTRINGEnumLiteralDeclaration_2()); }
		('string')
		{ after(grammarAccess.getTypeAccess().getSTRINGEnumLiteralDeclaration_2()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Pascal__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Pascal__Group__0__Impl
	rule__Pascal__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Pascal__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPascalAccess().getHeadAssignment_0()); }
	(rule__Pascal__HeadAssignment_0)
	{ after(grammarAccess.getPascalAccess().getHeadAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Pascal__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Pascal__Group__1__Impl
	rule__Pascal__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Pascal__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPascalAccess().getDeclarationsAssignment_1()); }
	(rule__Pascal__DeclarationsAssignment_1)*
	{ after(grammarAccess.getPascalAccess().getDeclarationsAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Pascal__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Pascal__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Pascal__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPascalAccess().getScopeAssignment_2()); }
	(rule__Pascal__ScopeAssignment_2)*
	{ after(grammarAccess.getPascalAccess().getScopeAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Program__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Program__Group__0__Impl
	rule__Program__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Program__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getProgramAccess().getProgramKeyword_0()); }
	'program'
	{ after(grammarAccess.getProgramAccess().getProgramKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Program__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Program__Group__1__Impl
	rule__Program__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Program__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getProgramAccess().getNameAssignment_1()); }
	(rule__Program__NameAssignment_1)
	{ after(grammarAccess.getProgramAccess().getNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Program__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Program__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Program__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getProgramAccess().getSemicolonKeyword_2()); }
	';'
	{ after(grammarAccess.getProgramAccess().getSemicolonKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Var_block__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Var_block__Group__0__Impl
	rule__Var_block__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Var_block__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVar_blockAccess().getVarKeyword_0()); }
	'var'
	{ after(grammarAccess.getVar_blockAccess().getVarKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Var_block__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Var_block__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Var_block__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	(
		{ before(grammarAccess.getVar_blockAccess().getAlternatives_1()); }
		(rule__Var_block__Alternatives_1)
		{ after(grammarAccess.getVar_blockAccess().getAlternatives_1()); }
	)
	(
		{ before(grammarAccess.getVar_blockAccess().getAlternatives_1()); }
		(rule__Var_block__Alternatives_1)*
		{ after(grammarAccess.getVar_blockAccess().getAlternatives_1()); }
	)
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Var_decl__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Var_decl__Group__0__Impl
	rule__Var_decl__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Var_decl__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVar_declAccess().getVar_idAssignment_0()); }
	(rule__Var_decl__Var_idAssignment_0)
	{ after(grammarAccess.getVar_declAccess().getVar_idAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Var_decl__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Var_decl__Group__1__Impl
	rule__Var_decl__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Var_decl__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVar_declAccess().getColonKeyword_1()); }
	':'
	{ after(grammarAccess.getVar_declAccess().getColonKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Var_decl__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Var_decl__Group__2__Impl
	rule__Var_decl__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Var_decl__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVar_declAccess().getVar_typeAssignment_2()); }
	(rule__Var_decl__Var_typeAssignment_2)
	{ after(grammarAccess.getVar_declAccess().getVar_typeAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Var_decl__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Var_decl__Group__3__Impl
	rule__Var_decl__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Var_decl__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVar_declAccess().getGroup_3()); }
	(rule__Var_decl__Group_3__0)?
	{ after(grammarAccess.getVar_declAccess().getGroup_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Var_decl__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Var_decl__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Var_decl__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVar_declAccess().getSemicolonKeyword_4()); }
	';'
	{ after(grammarAccess.getVar_declAccess().getSemicolonKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Var_decl__Group_3__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Var_decl__Group_3__0__Impl
	rule__Var_decl__Group_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Var_decl__Group_3__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVar_declAccess().getEqualsSignKeyword_3_0()); }
	'='
	{ after(grammarAccess.getVar_declAccess().getEqualsSignKeyword_3_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Var_decl__Group_3__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Var_decl__Group_3__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Var_decl__Group_3__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVar_declAccess().getValueAssignment_3_1()); }
	(rule__Var_decl__ValueAssignment_3_1)
	{ after(grammarAccess.getVar_declAccess().getValueAssignment_3_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Var_list__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Var_list__Group__0__Impl
	rule__Var_list__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Var_list__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVar_listAccess().getVar_idAssignment_0()); }
	(rule__Var_list__Var_idAssignment_0)
	{ after(grammarAccess.getVar_listAccess().getVar_idAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Var_list__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Var_list__Group__1__Impl
	rule__Var_list__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Var_list__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVar_listAccess().getGroup_1()); }
	(rule__Var_list__Group_1__0)*
	{ after(grammarAccess.getVar_listAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Var_list__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Var_list__Group__2__Impl
	rule__Var_list__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Var_list__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVar_listAccess().getColonKeyword_2()); }
	':'
	{ after(grammarAccess.getVar_listAccess().getColonKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Var_list__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Var_list__Group__3__Impl
	rule__Var_list__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Var_list__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVar_listAccess().getVar_typeAssignment_3()); }
	(rule__Var_list__Var_typeAssignment_3)
	{ after(grammarAccess.getVar_listAccess().getVar_typeAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Var_list__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Var_list__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Var_list__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVar_listAccess().getSemicolonKeyword_4()); }
	';'
	{ after(grammarAccess.getVar_listAccess().getSemicolonKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Var_list__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Var_list__Group_1__0__Impl
	rule__Var_list__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Var_list__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVar_listAccess().getCommaKeyword_1_0()); }
	','
	{ after(grammarAccess.getVar_listAccess().getCommaKeyword_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Var_list__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Var_list__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Var_list__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVar_listAccess().getVar_idsAssignment_1_1()); }
	(rule__Var_list__Var_idsAssignment_1_1)
	{ after(grammarAccess.getVar_listAccess().getVar_idsAssignment_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Block__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Block__Group__0__Impl
	rule__Block__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Block__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBlockAccess().getBeginKeyword_0()); }
	'begin'
	{ after(grammarAccess.getBlockAccess().getBeginKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Block__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Block__Group__1__Impl
	rule__Block__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Block__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBlockAccess().getStatementsAssignment_1()); }
	(rule__Block__StatementsAssignment_1)
	{ after(grammarAccess.getBlockAccess().getStatementsAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Block__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Block__Group__2__Impl
	rule__Block__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Block__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBlockAccess().getEndKeyword_2()); }
	'end'
	{ after(grammarAccess.getBlockAccess().getEndKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Block__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Block__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Block__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBlockAccess().getFullStopKeyword_3()); }
	'.'
	{ after(grammarAccess.getBlockAccess().getFullStopKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Atrib__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Atrib__Group__0__Impl
	rule__Atrib__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Atrib__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAtribAccess().getVar_idAssignment_0()); }
	(rule__Atrib__Var_idAssignment_0)
	{ after(grammarAccess.getAtribAccess().getVar_idAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Atrib__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Atrib__Group__1__Impl
	rule__Atrib__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Atrib__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAtribAccess().getColonEqualsSignKeyword_1()); }
	':='
	{ after(grammarAccess.getAtribAccess().getColonEqualsSignKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Atrib__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Atrib__Group__2__Impl
	rule__Atrib__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Atrib__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAtribAccess().getExpAssignment_2()); }
	(rule__Atrib__ExpAssignment_2)
	{ after(grammarAccess.getAtribAccess().getExpAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Atrib__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Atrib__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Atrib__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAtribAccess().getSemicolonKeyword_3()); }
	';'
	{ after(grammarAccess.getAtribAccess().getSemicolonKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Arit_expression__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Arit_expression__Group__0__Impl
	rule__Arit_expression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Arit_expression__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getArit_expressionAccess().getValueAssignment_0()); }
	(rule__Arit_expression__ValueAssignment_0)
	{ after(grammarAccess.getArit_expressionAccess().getValueAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Arit_expression__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Arit_expression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Arit_expression__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getArit_expressionAccess().getExpAssignment_1()); }
	(rule__Arit_expression__ExpAssignment_1)*
	{ after(grammarAccess.getArit_expressionAccess().getExpAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Repetitive_arit_expression__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Repetitive_arit_expression__Group__0__Impl
	rule__Repetitive_arit_expression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Repetitive_arit_expression__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRepetitive_arit_expressionAccess().getOpAssignment_0()); }
	(rule__Repetitive_arit_expression__OpAssignment_0)
	{ after(grammarAccess.getRepetitive_arit_expressionAccess().getOpAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Repetitive_arit_expression__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Repetitive_arit_expression__Group__1__Impl
	rule__Repetitive_arit_expression__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Repetitive_arit_expression__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRepetitive_arit_expressionAccess().getValueAssignment_1()); }
	(rule__Repetitive_arit_expression__ValueAssignment_1)
	{ after(grammarAccess.getRepetitive_arit_expressionAccess().getValueAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Repetitive_arit_expression__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Repetitive_arit_expression__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Repetitive_arit_expression__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRepetitive_arit_expressionAccess().getExpAssignment_2()); }
	(rule__Repetitive_arit_expression__ExpAssignment_2)*
	{ after(grammarAccess.getRepetitive_arit_expressionAccess().getExpAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Rel_expression__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Rel_expression__Group__0__Impl
	rule__Rel_expression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Rel_expression__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRel_expressionAccess().getOpenAssignment_0()); }
	(rule__Rel_expression__OpenAssignment_0)
	{ after(grammarAccess.getRel_expressionAccess().getOpenAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Rel_expression__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Rel_expression__Group__1__Impl
	rule__Rel_expression__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Rel_expression__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRel_expressionAccess().getFirstAssignment_1()); }
	(rule__Rel_expression__FirstAssignment_1)
	{ after(grammarAccess.getRel_expressionAccess().getFirstAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Rel_expression__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Rel_expression__Group__2__Impl
	rule__Rel_expression__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Rel_expression__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRel_expressionAccess().getOpAssignment_2()); }
	(rule__Rel_expression__OpAssignment_2)
	{ after(grammarAccess.getRel_expressionAccess().getOpAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Rel_expression__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Rel_expression__Group__3__Impl
	rule__Rel_expression__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Rel_expression__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRel_expressionAccess().getSecondAssignment_3()); }
	(rule__Rel_expression__SecondAssignment_3)
	{ after(grammarAccess.getRel_expressionAccess().getSecondAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Rel_expression__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Rel_expression__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Rel_expression__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRel_expressionAccess().getCloseAssignment_4()); }
	(rule__Rel_expression__CloseAssignment_4)
	{ after(grammarAccess.getRel_expressionAccess().getCloseAssignment_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Pascal__HeadAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPascalAccess().getHeadProgramParserRuleCall_0_0()); }
		ruleprogram
		{ after(grammarAccess.getPascalAccess().getHeadProgramParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Pascal__DeclarationsAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPascalAccess().getDeclarationsVar_blockParserRuleCall_1_0()); }
		rulevar_block
		{ after(grammarAccess.getPascalAccess().getDeclarationsVar_blockParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Pascal__ScopeAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPascalAccess().getScopeBlockParserRuleCall_2_0()); }
		ruleblock
		{ after(grammarAccess.getPascalAccess().getScopeBlockParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Program__NameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getProgramAccess().getNameIDTerminalRuleCall_1_0()); }
		RULE_ID
		{ after(grammarAccess.getProgramAccess().getNameIDTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Var_block__Var_statementsAssignment_1_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getVar_blockAccess().getVar_statementsVar_declParserRuleCall_1_0_0()); }
		rulevar_decl
		{ after(grammarAccess.getVar_blockAccess().getVar_statementsVar_declParserRuleCall_1_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Var_block__Var_statementsAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getVar_blockAccess().getVar_statementsVar_listParserRuleCall_1_1_0()); }
		rulevar_list
		{ after(grammarAccess.getVar_blockAccess().getVar_statementsVar_listParserRuleCall_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Var_decl__Var_idAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getVar_declAccess().getVar_idIDTerminalRuleCall_0_0()); }
		RULE_ID
		{ after(grammarAccess.getVar_declAccess().getVar_idIDTerminalRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Var_decl__Var_typeAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getVar_declAccess().getVar_typeTypeEnumRuleCall_2_0()); }
		ruletype
		{ after(grammarAccess.getVar_declAccess().getVar_typeTypeEnumRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Var_decl__ValueAssignment_3_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getVar_declAccess().getValueSome_valueParserRuleCall_3_1_0()); }
		rulesome_value
		{ after(grammarAccess.getVar_declAccess().getValueSome_valueParserRuleCall_3_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Var_list__Var_idAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getVar_listAccess().getVar_idIDTerminalRuleCall_0_0()); }
		RULE_ID
		{ after(grammarAccess.getVar_listAccess().getVar_idIDTerminalRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Var_list__Var_idsAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getVar_listAccess().getVar_idsIDTerminalRuleCall_1_1_0()); }
		RULE_ID
		{ after(grammarAccess.getVar_listAccess().getVar_idsIDTerminalRuleCall_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Var_list__Var_typeAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getVar_listAccess().getVar_typeTypeEnumRuleCall_3_0()); }
		ruletype
		{ after(grammarAccess.getVar_listAccess().getVar_typeTypeEnumRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Block__StatementsAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getBlockAccess().getStatementsStatementParserRuleCall_1_0()); }
		rulestatement
		{ after(grammarAccess.getBlockAccess().getStatementsStatementParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Statement__Atrib_blockAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getStatementAccess().getAtrib_blockAtribParserRuleCall_0()); }
		ruleatrib
		{ after(grammarAccess.getStatementAccess().getAtrib_blockAtribParserRuleCall_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Atrib__Var_idAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAtribAccess().getVar_idIDTerminalRuleCall_0_0()); }
		RULE_ID
		{ after(grammarAccess.getAtribAccess().getVar_idIDTerminalRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Atrib__ExpAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAtribAccess().getExpExpressionParserRuleCall_2_0()); }
		ruleexpression
		{ after(grammarAccess.getAtribAccess().getExpExpressionParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Arit_expression__ValueAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getArit_expressionAccess().getValueSome_valueParserRuleCall_0_0()); }
		rulesome_value
		{ after(grammarAccess.getArit_expressionAccess().getValueSome_valueParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Arit_expression__ExpAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getArit_expressionAccess().getExpRepetitive_arit_expressionParserRuleCall_1_0()); }
		rulerepetitive_arit_expression
		{ after(grammarAccess.getArit_expressionAccess().getExpRepetitive_arit_expressionParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Repetitive_arit_expression__OpAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRepetitive_arit_expressionAccess().getOpArit_opParserRuleCall_0_0()); }
		rulearit_op
		{ after(grammarAccess.getRepetitive_arit_expressionAccess().getOpArit_opParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Repetitive_arit_expression__ValueAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRepetitive_arit_expressionAccess().getValueSome_valueParserRuleCall_1_0()); }
		rulesome_value
		{ after(grammarAccess.getRepetitive_arit_expressionAccess().getValueSome_valueParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Repetitive_arit_expression__ExpAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRepetitive_arit_expressionAccess().getExpRepetitive_arit_expressionParserRuleCall_2_0()); }
		rulerepetitive_arit_expression
		{ after(grammarAccess.getRepetitive_arit_expressionAccess().getExpRepetitive_arit_expressionParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Rel_expression__OpenAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRel_expressionAccess().getOpenOpen_parParserRuleCall_0_0()); }
		ruleopen_par
		{ after(grammarAccess.getRel_expressionAccess().getOpenOpen_parParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Rel_expression__FirstAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRel_expressionAccess().getFirstSome_valueParserRuleCall_1_0()); }
		rulesome_value
		{ after(grammarAccess.getRel_expressionAccess().getFirstSome_valueParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Rel_expression__OpAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRel_expressionAccess().getOpRel_opParserRuleCall_2_0()); }
		rulerel_op
		{ after(grammarAccess.getRel_expressionAccess().getOpRel_opParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Rel_expression__SecondAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRel_expressionAccess().getSecondSome_valueParserRuleCall_3_0()); }
		rulesome_value
		{ after(grammarAccess.getRel_expressionAccess().getSecondSome_valueParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Rel_expression__CloseAssignment_4
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRel_expressionAccess().getCloseClose_parParserRuleCall_4_0()); }
		ruleclose_par
		{ after(grammarAccess.getRel_expressionAccess().getCloseClose_parParserRuleCall_4_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

RULE_STRING : '\'' ('a'..'z'|'A'..'Z'|'_'|'0'..'9'|'^'|'?'|'.'|'/'|'\\'|'*'|'%'|'&'|'@'|'#'|'('|')'|'$'|'='|'{'|'}'|'['|']'|','|'!'|'|'|'+'|'-')* '\'';

RULE_BOOLEAN : ('true'|'false');

RULE_MULTI_LINE_COMMENT : ('{*' ( options {greedy=false;} : . )*'*}'|'(*' ( options {greedy=false;} : . )*'*)');

RULE_SINGLE_LINE_COMMENT : '{' ~(('\n'|'\r'))* '}' ('\r'? '\n')?;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
