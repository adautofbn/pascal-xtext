/*
 * generated by Xtext 2.9.0
 */
grammar PsiInternalPascal;

options {
	superClass=AbstractPsiAntlrParser;
}

@lexer::header {
package edu.ufcg.compiladores.pascal.idea.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package edu.ufcg.compiladores.pascal.idea.parser.antlr.internal;

import org.eclipse.xtext.idea.parser.AbstractPsiAntlrParser;
import edu.ufcg.compiladores.pascal.idea.lang.PascalElementTypeProvider;
import org.eclipse.xtext.idea.parser.TokenTypeProvider;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import edu.ufcg.compiladores.pascal.services.PascalGrammarAccess;

import com.intellij.lang.PsiBuilder;
}

@parser::members {

	protected PascalGrammarAccess grammarAccess;

	protected PascalElementTypeProvider elementTypeProvider;

	public PsiInternalPascalParser(PsiBuilder builder, TokenStream input, PascalElementTypeProvider elementTypeProvider, PascalGrammarAccess grammarAccess) {
		this(input);
		setPsiBuilder(builder);
    	this.grammarAccess = grammarAccess;
		this.elementTypeProvider = elementTypeProvider;
	}

	@Override
	protected String getFirstRuleName() {
		return "Pascal";
	}

}

//Entry rule entryRulePascal
entryRulePascal returns [Boolean current=false]:
	{ markComposite(elementTypeProvider.getPascalElementType()); }
	iv_rulePascal=rulePascal
	{ $current=$iv_rulePascal.current; }
	EOF;

// Rule Pascal
rulePascal returns [Boolean current=false]
:
	(
		(
			(
				{
					markComposite(elementTypeProvider.getPascal_HeadProgramParserRuleCall_0_0ElementType());
				}
				lv_head_0_0=ruleprogram
				{
					doneComposite();
					if(!$current) {
						associateWithSemanticElement();
						$current = true;
					}
				}
			)
		)
		(
			(
				{
					markComposite(elementTypeProvider.getPascal_DeclarationsVar_declParserRuleCall_1_0ElementType());
				}
				lv_declarations_1_0=rulevar_decl
				{
					doneComposite();
					if(!$current) {
						associateWithSemanticElement();
						$current = true;
					}
				}
			)
		)*
		(
			(
				{
					markComposite(elementTypeProvider.getPascal_ScopeAtribParserRuleCall_2_0ElementType());
				}
				lv_scope_2_0=ruleatrib
				{
					doneComposite();
					if(!$current) {
						associateWithSemanticElement();
						$current = true;
					}
				}
			)
		)*
	)?
;

//Entry rule entryRuleprogram
entryRuleprogram returns [Boolean current=false]:
	{ markComposite(elementTypeProvider.getProgramElementType()); }
	iv_ruleprogram=ruleprogram
	{ $current=$iv_ruleprogram.current; }
	EOF;

// Rule program
ruleprogram returns [Boolean current=false]
:
	(
		{
			markLeaf(elementTypeProvider.getProgram_ProgramKeyword_0ElementType());
		}
		otherlv_0='program'
		{
			doneLeaf(otherlv_0);
		}
		(
			(
				{
					markLeaf(elementTypeProvider.getProgram_NameIDTerminalRuleCall_1_0ElementType());
				}
				lv_name_1_0=RULE_ID
				{
					if(!$current) {
						associateWithSemanticElement();
						$current = true;
					}
				}
				{
					doneLeaf(lv_name_1_0);
				}
			)
		)
		{
			markLeaf(elementTypeProvider.getProgram_SemicolonKeyword_2ElementType());
		}
		otherlv_2=';'
		{
			doneLeaf(otherlv_2);
		}
	)
;

//Entry rule entryRulevar_decl
entryRulevar_decl returns [Boolean current=false]:
	{ markComposite(elementTypeProvider.getVar_declElementType()); }
	iv_rulevar_decl=rulevar_decl
	{ $current=$iv_rulevar_decl.current; }
	EOF;

// Rule var_decl
rulevar_decl returns [Boolean current=false]
:
	(
		{
			markLeaf(elementTypeProvider.getVar_decl_VarKeyword_0ElementType());
		}
		otherlv_0='var'
		{
			doneLeaf(otherlv_0);
		}
		(
			(
				(
					{
						markComposite(elementTypeProvider.getVar_decl_Var_listVar_listParserRuleCall_1_0_0ElementType());
					}
					lv_var_list_1_0=rulevar_list
					{
						doneComposite();
						if(!$current) {
							associateWithSemanticElement();
							$current = true;
						}
					}
				)
			)
			{
				markLeaf(elementTypeProvider.getVar_decl_ColonKeyword_1_1ElementType());
			}
			otherlv_2=':'
			{
				doneLeaf(otherlv_2);
			}
			(
				(
					{
						markComposite(elementTypeProvider.getVar_decl_TypeTypeEnumRuleCall_1_2_0ElementType());
					}
					lv_type_3_0=ruleType
					{
						doneComposite();
						if(!$current) {
							associateWithSemanticElement();
							$current = true;
						}
					}
				)
			)
			{
				markLeaf(elementTypeProvider.getVar_decl_SemicolonKeyword_1_3ElementType());
			}
			otherlv_4=';'
			{
				doneLeaf(otherlv_4);
			}
		)+
	)
;

//Entry rule entryRulevar_list
entryRulevar_list returns [Boolean current=false]:
	{ markComposite(elementTypeProvider.getVar_listElementType()); }
	iv_rulevar_list=rulevar_list
	{ $current=$iv_rulevar_list.current; }
	EOF;

// Rule var_list
rulevar_list returns [Boolean current=false]
:
	(
		(
			(
				{
					markLeaf(elementTypeProvider.getVar_list_IdentifierIDTerminalRuleCall_0_0ElementType());
				}
				lv_identifier_0_0=RULE_ID
				{
					if(!$current) {
						associateWithSemanticElement();
						$current = true;
					}
				}
				{
					doneLeaf(lv_identifier_0_0);
				}
			)
		)
		    |
		(
			(
				(
					{
						markLeaf(elementTypeProvider.getVar_list_IdentifierIDTerminalRuleCall_1_0_0ElementType());
					}
					lv_identifier_1_0=RULE_ID
					{
						if(!$current) {
							associateWithSemanticElement();
							$current = true;
						}
					}
					{
						doneLeaf(lv_identifier_1_0);
					}
				)
			)
			{
				markLeaf(elementTypeProvider.getVar_list_CommaKeyword_1_1ElementType());
			}
			otherlv_2=','
			{
				doneLeaf(otherlv_2);
			}
			(
				(
					{
						markComposite(elementTypeProvider.getVar_list_VarsVar_listParserRuleCall_1_2_0ElementType());
					}
					lv_vars_3_0=rulevar_list
					{
						doneComposite();
						if(!$current) {
							associateWithSemanticElement();
							$current = true;
						}
					}
				)
			)+
		)
	)
;

//Entry rule entryRuleatrib
entryRuleatrib returns [Boolean current=false]:
	{ markComposite(elementTypeProvider.getAtribElementType()); }
	iv_ruleatrib=ruleatrib
	{ $current=$iv_ruleatrib.current; }
	EOF;

// Rule atrib
ruleatrib returns [Boolean current=false]
:
	(
		(
			(
				{
					markLeaf(elementTypeProvider.getAtrib_IdentifierIDTerminalRuleCall_0_0ElementType());
				}
				lv_identifier_0_0=RULE_ID
				{
					if(!$current) {
						associateWithSemanticElement();
						$current = true;
					}
				}
				{
					doneLeaf(lv_identifier_0_0);
				}
			)
		)
		{
			markLeaf(elementTypeProvider.getAtrib_ColonEqualsSignKeyword_1ElementType());
		}
		otherlv_1=':='
		{
			doneLeaf(otherlv_1);
		}
		(
			(
				{
					markComposite(elementTypeProvider.getAtrib_ExpExpressionParserRuleCall_2_0ElementType());
				}
				lv_exp_2_0=ruleexpression
				{
					doneComposite();
					if(!$current) {
						associateWithSemanticElement();
						$current = true;
					}
				}
			)
		)
		{
			markLeaf(elementTypeProvider.getAtrib_SemicolonKeyword_3ElementType());
		}
		otherlv_3=';'
		{
			doneLeaf(otherlv_3);
		}
	)
;

//Entry rule entryRuleexpression
entryRuleexpression returns [Boolean current=false]:
	{ markComposite(elementTypeProvider.getExpressionElementType()); }
	iv_ruleexpression=ruleexpression
	{ $current=$iv_ruleexpression.current; }
	EOF;

// Rule expression
ruleexpression returns [Boolean current=false]
:
	(
		(
			(
				{
					markComposite(elementTypeProvider.getExpression_ValueSomeValueParserRuleCall_0_0ElementType());
				}
				lv_value_0_0=ruleSomeValue
				{
					doneComposite();
					if(!$current) {
						associateWithSemanticElement();
						$current = true;
					}
				}
			)
		)
		(
			(
				{
					markComposite(elementTypeProvider.getExpression_ExpSecondExpParserRuleCall_1_0ElementType());
				}
				lv_exp_1_0=rulesecondExp
				{
					doneComposite();
					if(!$current) {
						associateWithSemanticElement();
						$current = true;
					}
				}
			)
		)*
	)
;

//Entry rule entryRulesecondExp
entryRulesecondExp returns [Boolean current=false]:
	{ markComposite(elementTypeProvider.getSecondExpElementType()); }
	iv_rulesecondExp=rulesecondExp
	{ $current=$iv_rulesecondExp.current; }
	EOF;

// Rule secondExp
rulesecondExp returns [Boolean current=false]
:
	(
		(
			(
				{
					markComposite(elementTypeProvider.getSecondExp_OpOperatorParserRuleCall_0_0ElementType());
				}
				lv_op_0_0=ruleoperator
				{
					doneComposite();
					if(!$current) {
						associateWithSemanticElement();
						$current = true;
					}
				}
			)
		)
		(
			(
				{
					markComposite(elementTypeProvider.getSecondExp_ValueSomeValueParserRuleCall_1_0ElementType());
				}
				lv_value_1_0=ruleSomeValue
				{
					doneComposite();
					if(!$current) {
						associateWithSemanticElement();
						$current = true;
					}
				}
			)
		)
		(
			(
				{
					markComposite(elementTypeProvider.getSecondExp_ExpSecondExpParserRuleCall_2_0ElementType());
				}
				lv_exp_2_0=rulesecondExp
				{
					doneComposite();
					if(!$current) {
						associateWithSemanticElement();
						$current = true;
					}
				}
			)
		)*
	)
;

//Entry rule entryRuleoperator
entryRuleoperator returns [Boolean current=false]:
	{ markComposite(elementTypeProvider.getOperatorElementType()); }
	iv_ruleoperator=ruleoperator
	{ $current=$iv_ruleoperator.current; }
	EOF;

// Rule operator
ruleoperator returns [Boolean current=false]
:
	(
		{
			markComposite(elementTypeProvider.getOperator_Arit_opParserRuleCall_0ElementType());
		}
		rulearit_op
		{
			doneComposite();
		}
		    |
		{
			markComposite(elementTypeProvider.getOperator_Rel_opParserRuleCall_1ElementType());
		}
		rulerel_op
		{
			doneComposite();
		}
	)
;

//Entry rule entryRulearit_op
entryRulearit_op returns [Boolean current=false]:
	{ markComposite(elementTypeProvider.getArit_opElementType()); }
	iv_rulearit_op=rulearit_op
	{ $current=$iv_rulearit_op.current; }
	EOF;

// Rule arit_op
rulearit_op returns [Boolean current=false]
:
	(
		{
			markLeaf(elementTypeProvider.getArit_op_PlusSignKeyword_0ElementType());
		}
		kw='+'
		{
			doneLeaf(kw);
		}
		    |
		{
			markLeaf(elementTypeProvider.getArit_op_HyphenMinusKeyword_1ElementType());
		}
		kw='-'
		{
			doneLeaf(kw);
		}
		    |
		{
			markLeaf(elementTypeProvider.getArit_op_AsteriskKeyword_2ElementType());
		}
		kw='*'
		{
			doneLeaf(kw);
		}
		    |
		{
			markLeaf(elementTypeProvider.getArit_op_DivKeyword_3ElementType());
		}
		kw='div'
		{
			doneLeaf(kw);
		}
		    |
		{
			markLeaf(elementTypeProvider.getArit_op_ModKeyword_4ElementType());
		}
		kw='mod'
		{
			doneLeaf(kw);
		}
	)
;

//Entry rule entryRulerel_op
entryRulerel_op returns [Boolean current=false]:
	{ markComposite(elementTypeProvider.getRel_opElementType()); }
	iv_rulerel_op=rulerel_op
	{ $current=$iv_rulerel_op.current; }
	EOF;

// Rule rel_op
rulerel_op returns [Boolean current=false]
:
	(
		{
			markLeaf(elementTypeProvider.getRel_op_GreaterThanSignKeyword_0ElementType());
		}
		kw='>'
		{
			doneLeaf(kw);
		}
		    |
		{
			markLeaf(elementTypeProvider.getRel_op_LessThanSignKeyword_1ElementType());
		}
		kw='<'
		{
			doneLeaf(kw);
		}
		    |
		{
			markLeaf(elementTypeProvider.getRel_op_GreaterThanSignEqualsSignKeyword_2ElementType());
		}
		kw='>='
		{
			doneLeaf(kw);
		}
		    |
		{
			markLeaf(elementTypeProvider.getRel_op_LessThanSignEqualsSignKeyword_3ElementType());
		}
		kw='<='
		{
			doneLeaf(kw);
		}
		    |
		{
			markLeaf(elementTypeProvider.getRel_op_EqualsSignKeyword_4ElementType());
		}
		kw='='
		{
			doneLeaf(kw);
		}
		    |
		{
			markLeaf(elementTypeProvider.getRel_op_LessThanSignGreaterThanSignKeyword_5ElementType());
		}
		kw='<>'
		{
			doneLeaf(kw);
		}
	)
;

//Entry rule entryRuleSomeValue
entryRuleSomeValue returns [Boolean current=false]:
	{ markComposite(elementTypeProvider.getSomeValueElementType()); }
	iv_ruleSomeValue=ruleSomeValue
	{ $current=$iv_ruleSomeValue.current; }
	EOF;

// Rule SomeValue
ruleSomeValue returns [Boolean current=false]
:
	(
		{
			markLeaf(elementTypeProvider.getSomeValue_IDTerminalRuleCall_0ElementType());
		}
		this_ID_0=RULE_ID
		{
			doneLeaf(this_ID_0);
		}
		    |
		{
			markLeaf(elementTypeProvider.getSomeValue_INTTerminalRuleCall_1ElementType());
		}
		this_INT_1=RULE_INT
		{
			doneLeaf(this_INT_1);
		}
		    |
		{
			markLeaf(elementTypeProvider.getSomeValue_STRINGTerminalRuleCall_2ElementType());
		}
		this_STRING_2=RULE_STRING
		{
			doneLeaf(this_STRING_2);
		}
	)
;

// Rule Type
ruleType returns [Boolean current=false]
:
	(
		(
			{
				markLeaf(elementTypeProvider.getType_BOOLEANEnumLiteralDeclaration_0ElementType());
			}
			enumLiteral_0='boolean'
			{
				doneLeaf(enumLiteral_0);
			}
		)
		    |
		(
			{
				markLeaf(elementTypeProvider.getType_INTEGEREnumLiteralDeclaration_1ElementType());
			}
			enumLiteral_1='integer'
			{
				doneLeaf(enumLiteral_1);
			}
		)
		    |
		(
			{
				markLeaf(elementTypeProvider.getType_STRINGEnumLiteralDeclaration_2ElementType());
			}
			enumLiteral_2='string'
			{
				doneLeaf(enumLiteral_2);
			}
		)
	)
;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
