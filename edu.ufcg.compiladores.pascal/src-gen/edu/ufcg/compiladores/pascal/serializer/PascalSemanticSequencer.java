/*
 * generated by Xtext 2.9.0
 */
package edu.ufcg.compiladores.pascal.serializer;

import com.google.inject.Inject;
import edu.ufcg.compiladores.pascal.pascal.Pascal;
import edu.ufcg.compiladores.pascal.pascal.PascalPackage;
import edu.ufcg.compiladores.pascal.pascal.atrib;
import edu.ufcg.compiladores.pascal.pascal.program;
import edu.ufcg.compiladores.pascal.pascal.var_decl;
import edu.ufcg.compiladores.pascal.pascal.var_list;
import edu.ufcg.compiladores.pascal.services.PascalGrammarAccess;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;

@SuppressWarnings("all")
public class PascalSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private PascalGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == PascalPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case PascalPackage.PASCAL:
				sequence_Pascal(context, (Pascal) semanticObject); 
				return; 
			case PascalPackage.ATRIB:
				sequence_atrib(context, (atrib) semanticObject); 
				return; 
			case PascalPackage.PROGRAM:
				sequence_program(context, (program) semanticObject); 
				return; 
			case PascalPackage.VAR_DECL:
				sequence_var_decl(context, (var_decl) semanticObject); 
				return; 
			case PascalPackage.VAR_LIST:
				sequence_var_list(context, (var_list) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     Pascal returns Pascal
	 *
	 * Constraint:
	 *     (element+=program element+=var_decl* element+=atrib*)
	 */
	protected void sequence_Pascal(ISerializationContext context, Pascal semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     atrib returns atrib
	 *
	 * Constraint:
	 *     (identifier=ID value=SomeValue)
	 */
	protected void sequence_atrib(ISerializationContext context, atrib semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, PascalPackage.Literals.ATRIB__IDENTIFIER) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, PascalPackage.Literals.ATRIB__IDENTIFIER));
			if (transientValues.isValueTransient(semanticObject, PascalPackage.Literals.ATRIB__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, PascalPackage.Literals.ATRIB__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getAtribAccess().getIdentifierIDTerminalRuleCall_0_0(), semanticObject.getIdentifier());
		feeder.accept(grammarAccess.getAtribAccess().getValueSomeValueParserRuleCall_2_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     program returns program
	 *
	 * Constraint:
	 *     name=ID
	 */
	protected void sequence_program(ISerializationContext context, program semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, PascalPackage.Literals.PROGRAM__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, PascalPackage.Literals.PROGRAM__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getProgramAccess().getNameIDTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     var_decl returns var_decl
	 *
	 * Constraint:
	 *     (var_list+=var_list type+=Type)+
	 */
	protected void sequence_var_decl(ISerializationContext context, var_decl semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     var_list returns var_list
	 *
	 * Constraint:
	 *     (identifier+=ID var_list+=var_list*)
	 */
	protected void sequence_var_list(ISerializationContext context, var_list semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}
